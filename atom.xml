<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Minotaur story]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://minotaursu.com/"/>
  <updated>2024-06-19T12:46:32.928Z</updated>
  <id>http://minotaursu.com/</id>
  
  <author>
    <name><![CDATA[minotaur]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[我对投资的看法]]></title>
    <link href="http://minotaursu.com/2024/06/19/%E6%88%91%E5%AF%B9%E6%8A%95%E8%B5%84%E7%9A%84%E7%9C%8B%E6%B3%95/"/>
    <id>http://minotaursu.com/2024/06/19/我对投资的看法/</id>
    <published>2024-06-19T12:41:25.000Z</published>
    <updated>2024-06-19T12:46:32.928Z</updated>
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/invest.jpg" alt=""><br>在NVDA市值登顶的这一天，我觉得有必要谈谈未来可能会带来的变化。我们正面临着可能是第四次工业革命的时代，这可能会全面改变世界，也可能只是在某些领域大幅提高效率，却同时取代更多的人力工作，使世界变得更加单调乏味。至于未来的走向，我无法做出准确预测，但NVDA市值的暴涨无疑让部分人获得了巨大的财富。</p>
<p>谈到当前美股“七姐妹”大幅上涨和美股市场价值的集中，我个人认为原因有以下几点：</p>
<ol>
<li><strong>美元回流引发的资金充裕</strong> ：大量美元回流导致市场上资金充沛。</li>
<li><strong>长期缺乏重大基础理论突破</strong> ：信息革命逐渐进入尾声，全球陷入存量内卷阶段，需要重大创新来推动经济增长，而人工智能（AI）正好顺应了这一历史潮流。</li>
<li><strong>高利率和市场垄断的加剧</strong> ：资金倾向于集中投资于头部公司的股票，导致这些股票市值迅速攀升。</li>
</ol>
<p>对于个人投资者来说，要把握股票短期波动的机会并不容易。更明智的做法是尽可能预见未来的趋势，在适当的价格水平上寻找符合时代潮流、具有长期增长潜力的股票进行投资，并在市场出现泡沫之前进行卖出。</p>
<p>因此，我坚信以下几点投资原则：</p>
<ol>
<li><strong>追随泡沫</strong> ：泡沫往往是创新发展的必然伴随。在重大创新初期，泡沫会膨胀，及时发现并跟踪泡沫是赚钱的关键。当创新实际发展与泡沫的程度相匹配时，这就是突破。然而，如果泡沫过度超前于实际创新进展，就会演变成投机。</li>
<li><strong>均值回归</strong> ：价格最终会回归到其真实价值。</li>
<li><strong>不投资等于亏损</strong> ：在当前以信用为基础的货币体系下，不进行投资实际上等同于损失，因为无法击败通货膨胀，这必然导致资产贬值。</li>
</ol>
<p>这些原则能够帮助投资者在动荡的市场环境中保持理性，并尽可能获取长期稳定的投资回报。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/invest.jpg" alt=""><br>在NVDA市值登顶的这一天，我觉得有必要谈谈未来]]>
    </summary>
    
      <category term="投资" scheme="http://minotaursu.com/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我对未来技术趋势的一些看法]]></title>
    <link href="http://minotaursu.com/2019/07/16/%E6%88%91%E5%AF%B9%E6%9C%AA%E6%9D%A5%E6%8A%80%E6%9C%AF%E8%B6%8B%E5%8A%BF%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9C%8B%E6%B3%95/"/>
    <id>http://minotaursu.com/2019/07/16/我对未来技术趋势的一些看法/</id>
    <published>2019-07-16T09:40:27.000Z</published>
    <updated>2019-06-08T01:49:04.321Z</updated>
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/skycity.jpg" alt=""><br>预测未来的技术发展方向是件有趣又有意义的事情，正确的判断技术发展方向对于技术选型，业务发展和职业规划都起着至关重要的作用。日常的需求沟通，项目管理，设计编码，运维部署工作能带给我们满足感和安全感，但是在脚踩大地之外偶尔也需要仰望一下星空，看看未来是什么样子，这里就神棍一把，说一下我对未来技术发展趋势的一些看法。</p>
<h1 id="困难与挑战">困难与挑战</h1><p>在预测未来之前，首先分析一下程序员的日常工作中遇到哪些困难与挑战。</p>
<h3 id="需求和设计">需求和设计</h3><p>在需求沟通阶段，程序员需要准确的获取PRD上的需求信息，并对业务的价值和发展有一定的预判。根据以上的信息进行技术选型，数据建模，设计抽象。在这个过程中主要的挑战有：</p>
<ul>
<li>高效的需求沟通</li>
<li>合理的技术方案选择</li>
<li>对现实世界的逻辑抽象</li>
</ul>
<h3 id="开发和测试">开发和测试</h3><p>在编码和测试阶段，程序员需要选择适合的数据结构并编写算法，合理的运用设计模式高效的实现功能，并且保证尽可能少的存在bug。在这个过程中主要的挑战有：</p>
<ul>
<li>高效的编码</li>
<li>避免语言的陷阱</li>
<li>尽量少的bug</li>
<li>代码有可读性和机器执行效率</li>
</ul>
<h3 id="部署和运维">部署和运维</h3><p>在部署和运维阶段涉及到测试环境和生产环境2个方面，程序员分别需要在测试环境和生产环境部署代码和定位问题。在这个过程中主要的挑战有：</p>
<ul>
<li>方便的提供多套隔离的测试环境</li>
<li>方便的在多集群多机器的生产环境部署和回滚代码</li>
<li>方便的部署和升级基础设施(例如mysql)</li>
<li>生产环境和测试环境的一致</li>
<li>生产环境可以弹性伸缩</li>
<li>有工具能辅助发现定位问题</li>
</ul>
<h3 id="系统内部">系统内部</h3><p>系统内部的主要挑战来自代码腐烂和功能复用2个方面。</p>
<ul>
<li>代码腐烂：如何在系统复杂度不断增加，几千几万次迭代之后依然可以高效的进行功能开发，而不是系统变成谁都不敢动的层层叠，开发效率越来越慢。</li>
<li>功能复用：代码和系统的复用往往意味着更高的开发效率，更少的系统风险，一次修改就可以解决问题，而不是满世界的查找相同功能的代码进行修改。</li>
</ul>
<h3 id="系统外部">系统外部</h3><p>系统外部的主要挑战来自高并发，高并发带来3个问题，抗压，竞态条件，热点数据</p>
<ul>
<li>抗压<br>高并发意味着系统需要支撑更高的吞吐量，如果存在比较严重的性能瓶颈往往导致服务的不可用，无状态的节点可以比较容易的水平扩展，有状态的节点通常会成为系统的瓶颈。比较常见的解决方案是分库分表+缓存，但是同样带来开发难度提升，数据不一致，数据迁移等问题。</li>
<li>竞态条件<br>高并发也会导致小概率的竞态条件不断出现，导致不能得到正确的结果。例如cache aside模式中读缓存为空并且DB读耗时&gt;DB写耗时会导致缓存脏数据问题。</li>
<li>热点数据<br>高并发在秒杀等场景中也会导致热点数据问题，在DB中会导致严重的锁冲突性能急剧下降，在cache中会导致缓存穿透，击穿，雪崩等问题。</li>
</ul>
<h3 id="业务约束">业务约束</h3><p>不同业务的特点也会带来不一样的挑战，例如很多金融业务会要求强一致而非最终一致，计费等业务的错误容忍度也远低于社区，微博突发热点话题的业务特点也会带来更大的技术挑战。</p>
<h1 id="趋势：一切皆代码，无处不AI">趋势：一切皆代码，无处不AI</h1><p>分析了软件开发过程中面临的困难与挑战之后，终于来到了激动人心的未来技术趋势部分。无论是大到工业革命还是小到技术微创新，本质上都会发展生产力，解放生产力，未来技术的发展肯定也会极大的改变软件开发行业，和其他的行业一样，分化成标准化，规范化，规模化的大规模工业制成品模式和少部分知识密集型的研发模式。对于未来的技术趋势我认为是—<strong>一切皆代码，无处不AI</strong>，软件开发的整个生命周期都通过代码的形式进行组织和编排，同时有AI参与到需求，设计，编码，测试，运维的每个阶段，软件开发变的非常容易，极大的降低门槛。 针对上述遇到的困难与挑战，具体看一下已经出现的和可能出现的解决方案。</p>
<h3 id="需求与设计">需求与设计</h3><p>在需求和设计阶段我认为未来的趋势是<strong>SaaS的繁荣+专家系统+更快的原型构建工具</strong>。随着云计算的发展，数据的积累和SaaS自身发展，SaaS会逐步取代外包软件研发和自建研发团队，直接购买SaaS服务将会是中小型公司的第一选择。AI+SaaS会改变SaaS千篇一律的缺点，专家系统根据企业的业务特点生成个性化，定制化，智能化的解决方案。在原型构建领域会出现类Sql的语言，程序员不必再告诉计算机怎么做，只需要声明式编程即可。</p>
<h3 id="编码和测试">编码和测试</h3><p>在编码和测试阶段我认为未来的趋势是<strong>更简单的并发编程+所见即所得编程+AI辅助编程+持续集成</strong>。在未来TDD会成为主流，写单元测试不再是一项增加成本的额外工作，而且真正成为提高生产力的工具，在所见即所得的编程模式中写的每写一行代码都能直接看到单元测试的运行过程和当前结果，AI辅助编程会使得未来实现一个模块就如同当前调用一个类库一样简单，每次的commmit都会触发独立的持续集成流程，软件的开发难度会有大幅下降，开发效率会有极大的提升。</p>
<h3 id="部署和运维-1">部署和运维</h3><p>在部署和运维领域我认为未来的趋势是<strong>容器+AI+故障自动定位+故障转移/恢复</strong>。在高可用架构下人往往成为最大的瓶颈，从故障发生到故障发现到故障定位到故障止损到根因分析，即使有着最强大的监控工具和最高效的处理流程大部分故障依然需要人的介入，故障恢复时间也存在极大的不确定性，同时7✖24的oncall也给人带来极大的精神压力。故障的定位本质上是一个封闭的领域，非常适合机器学习在故障定位中发挥作用，在未来代码部署之后AI就开始学习，当故障发生时可以自动扩容+限流+降级+定位根因+故障转移，甚至可以自动的打一段代码补丁快速止损。</p>
<h3 id="架构">架构</h3><p>在架构领域我认为未来的趋势是<strong>更丰富更强大更智能的基础设施+更强大更智能程序运行时</strong>。软件开发生命周期中技术发展带来的生产力提升将使代码实现更加的简单，风格更加的统一，大幅减少了代码腐烂的速度，提高代码了代码复用率。也一定会出现更强大更智能的runtime环境，使得程序的并发控制更加的简单出错的可能性更小，非功能需求更加容易解决，同时基础设施也会更丰富更强大更智能，更好的解决系统内部，系统外部，业务约束带来的挑战。例如同时满足高性能+高吞吐+事务+扩展性的数据库（关系型并不是OLTP的核心需求）会取代mysql分库分表+缓存的模式。</p>
<h1 id="未来的分化">未来的分化</h1><p>虽然完全的自动编程并不现实（准确的告诉机器想要什么并不比告诉机器如何做更容易），但是生产力的不断发展必然影响这个行业，上述的改变很有可能发生，在未来初级程序员工作会大幅的减少，偏重业务与偏重基础技术的工作也会出现明显的分化，偏业务方向的程序员工作会变成行业解决方案架构师和技术咨询，偏基础技术的程序员则会成为某个领域的专家。</p>
<blockquote>
<p>第一只猴子开始仰望星空时，人类诞生。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/skycity.jpg" alt=""><br>预测未来的技术发展方向是件有趣又有意义的事情，]]>
    </summary>
    
      <category term="架构" scheme="http://minotaursu.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="职业规划" scheme="http://minotaursu.com/tags/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
      <category term="软件开发" scheme="http://minotaursu.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何成为高效学习的程序员]]></title>
    <link href="http://minotaursu.com/2019/06/24/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    <id>http://minotaursu.com/2019/06/24/如何成为高效学习的程序员/</id>
    <published>2019-06-24T09:01:16.000Z</published>
    <updated>2019-06-08T01:48:49.616Z</updated>
    <content type="html"><![CDATA[<h1 id="为什么需要学习">为什么需要学习</h1><h3 id="学习的重要性">学习的重要性</h3><p>在当前这个时代信息的传播效率大幅提升，知识的获取成本大幅降低，互联网在改变着世界的同时，行业本身也在快速的发生变化，不断的有新的工具，框架，语言，解决方案产生，甚至架构思路和模式都会和几年前不同，行业发展得太快，纯靠经验积累行不通，变化的速度远大于经验积累的速度。快速的找到所需要的知识并能高效学习，对于程序员越来越重要，是最核心的能力之一。</p>
<h3 id="第一动因">第一动因</h3><p>虽然学习非常重要，但是学习并不一定能带来成功，并且很难看到直接看到短期收益，但是学习对人成长的长期影响远大于短期影响，因此学习的首要目的一定是内在的，相比于获得外部的认可更应该关注自我成长，这样才能持续学习持续成长。</p>
<h1 id="如何高效学习">如何高效学习</h1><p>关于如何做到高效学习，我认为有以下几点。</p>
<h3 id="走出舒适区">走出舒适区</h3><p>高效学习的第一步就是走出舒适区，有成长的意愿和成长的行动便是学习的第一步，对于舒适区内的事情我们习惯于通过经验和潜意识解决，往往很难有成长。就像哥伦布发现新大陆一样，只有离开旧大陆勇敢的杨帆起航才可能发现宝藏，当然这个过程并不是毫无风险的，我们要避免进入充满暗礁的恐慌区。</p>
<p><img src="http://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/goway.jpg" alt=""></p>
<h3 id="目标与反馈">目标与反馈</h3><p>在离开舒适区之后，目标和反馈就是我们航行旅途中的星空和罗盘。我们最好设立2种目标，一种是远大的愿景，保证我们向着彼岸航行，不被短期的诱惑改变航向，一种则是阶梯式的短期目标，保证我们扎实的逐步前行，不被看起来遥不可及的彼岸所击倒。反馈就像手中的罗盘能帮助我们及时的调整航向，校正行动与目标之间的偏离，同时即时反馈也是建立兴趣的关键，可以帮助我们提升成就感。</p>
<h3 id="千层饼式的学习方式">千层饼式的学习方式</h3><p>对于一项新技术的学习存在2种学习方式。</p>
<ul>
<li>top-down<br>实践后理论的在使用中学习方式，这种方式的好处是学的快，有成就感，坏处是基础不牢，理论差。</li>
<li>bottom-up<br>先理论后实践的结构化学习方式，这种方式的好处是基础扎实，未来创造力强，坏处是学的慢，容易忘记。<br>我个人更喜欢千层饼式的学习方式，将top-down和bottom-up相结合，先有一个感性认知，然后再夯实基础进行理性的总结。针对具体的领域在决定是花更多的时间基础还是在实践。</li>
</ul>
<h3 id="保持专注">保持专注</h3><p>专注程度是决定学习质量和效率的关键，儿童能够快速会学一个技能正是因为更能心无旁骛的学习，更容易进入心流状态。专注力的培养涉及到多个方面，需要在日常的工作生活中提升，例如找到一个爱好并沉浸其中就是一个比较好的培养专注力的方式。同时情绪是影响专注度的最重要的原因之一，焦虑，混乱，恐惧是专注度最大的敌人。被deadline驱动，但不被deadline困扰。</p>
<h3 id="高质量心理表征">高质量心理表征</h3><p>《刻意练习》中提到能否建立高质量心理表征是刻意练习最重要的检验成果之一。能否建立高质量心理表征是一个人能否挥洒自如，举一反三的关键，只有一个人建立了高质量心理表征才是真正的高手，如果做不到这点，可能是练习的程度不够也可能是练习方法的问题，缺少深层次的思考与熟练度。</p>
<h3 id="观摩高手">观摩高手</h3><p>观摩高手是突破自身瓶颈的最佳方式，在学习的路上往往会遇到瓶颈，并且这个瓶颈和极限还有很远的距离，这个时候就需要一些外力的帮助，最好得到一位已经突破瓶颈的大师指导。和青铜打上一百场，也不如在王者的指点下打一场。</p>
<h3 id="时间管理">时间管理</h3><p>更好的时间管理可以帮助我们有更多次更高效的学习。对于时间管理比较好用的工具有四象限和番茄时钟。时间四象限对工作有着指导意义，尽量把时间投入到重要不紧急的第二象限，减少一，三象限的时间投入，尽量不做第四象限的事情。番茄工作法则将任务细分到每个原子的番茄时钟，让做事更有效率。</p>
<p><img src="http://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/timemetric.png" alt=""></p>
<h3 id="精力管理">精力管理</h3><p>精力管理帮我们更好的面对来自生理上的基础挑战。</p>
<ul>
<li>体能<br>体能是最基础也最应该训练的部分。体能决定精力的基础。</li>
<li>情感<br>情感是精力中爆发力最强的部分，负面的情感有害并且影响巨大。情感决定精力的质量。</li>
<li>思维<br>思维是精力中最有创造力的部分，在放松中思考会带来更多的灵感。思维决定精力的效率。</li>
<li>意志<br>意志通向最深处的价值取向和自我，是最强大的动机来源。意志决定精力的强度。</li>
</ul>
<h1 id="程序员应该学习什么">程序员应该学习什么</h1><p>一个优秀的程序员应该不断的提升3个方面的能力，专业技能，软技能，学习能力。这里主要关注专业技能部分的提升。</p>
<h3 id="工具要熟练">工具要熟练</h3><p>工欲善其事必先利其器，工具使用的熟练程度是高手与菜鸟之间最肉眼可见的差距。工具使用的熟练程度直接决定做事的效率。推荐的工具有intellij idea，pycharm，vim。</p>
<h3 id="看书&amp;看文档&amp;看视频">看书&amp;看文档&amp;看视频</h3><p>看书是最容易构建完整的知识体系的学习方式，看书学习应该成为打基础时的第一选择。书籍的主要问题在于时效性，并且书籍往往都是二手知识，对于最新的技术看官方文档就是最佳的学习方式，例如spring家族，elastic系列。在看书和看文档之外看视频也是一个比较好的学习方式，生成的视频能带来最直观最感性的认识，容易形成深层次的长期记忆，并且也能通过观察高手的实际操作学到一些技巧。</p>
<h3 id="github&amp;twitter&amp;微博">github&amp;twitter&amp;微博</h3><p>在这些最及时更新的社区上我们可以通过follow一些技术大牛了解最新的行业动态和未来趋势。</p>
<h3 id="写demo写test看源码">写demo写test看源码</h3><p>写demo是深层次学习一个技术的最好的方式，例如实现一个rpc的demo可以帮助我们全面了解rpc最核心的技术和遇到问题的解决方案。写test则是学习如何使用一个技术的最好方式，只有能写出好的test的程序员才是一个合格的CRUD boy。看源码则是提高代码品味和code review技巧的最佳学习方式，不过看源码学习的投入成本很大，并且对于不熟悉的领域很难找到切入点。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="为什么需要学习">为什么需要学习</h1><h3 id="学习的重要性">学习的重要性</h3><p>在当前这个时代信息的传播效率大幅提升，知识的获取成本大幅降低，互联网在改变着世界的同时，行业本身也在快速的发生变化，不断的有新的工具，框架，语言，解决方案产生，甚]]>
    </summary>
    
      <category term="学习" scheme="http://minotaursu.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="职业规划" scheme="http://minotaursu.com/tags/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
      <category term="软技能" scheme="http://minotaursu.com/tags/%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[再谈稳定性工作]]></title>
    <link href="http://minotaursu.com/2019/06/11/%E5%86%8D%E8%B0%88%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    <id>http://minotaursu.com/2019/06/11/再谈稳定性/</id>
    <published>2019-06-11T08:33:17.000Z</published>
    <updated>2019-06-08T01:46:58.395Z</updated>
    <content type="html"><![CDATA[<p>之前也写过一篇稳定性工作的总结-<a href="http://minotaursu.com/2018/03/12/%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7%E4%B8%8E%E9%AB%98%E5%8F%AF%E7%94%A8/">如何保障高并发系统的稳定性与高可用</a>，但更多的是从系统开发者的角度说明如何保障单一系统的稳定性，做好自己负责系统的稳定性建设更多的是依赖知识和经验，是个技术活。负责了一整年的业务线稳定性建设之后，对于如何保障几十个系统的稳定性，协同几十人做好稳定性相关工作有了更多的思考和实践，又有了些新的体会，更需要科学的工程管理，涉及到多个方面。</p>
<h2 id="方向">方向</h2><ol>
<li>高可用<br>高可用要求系统有比较高的风险防范应对能力，把因软件/硬件/人为造成的故障对业务的影响降低到最小程度。系统能够对外提供有效服务的时间大于99.9%，99.99%，甚至是99.999%。 </li>
<li>零资损<br>高可用强调的是对外稳定服务，零资损强调的是内部资金安全。减少软件/硬件/人为的因素导致的资金损失风险。特别是计费，交易，营销这些和钱相关的系统。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/direction.png" alt=""></p>
<h2 id="维度">维度</h2><ol>
<li>流程规范<br>一个行之有效的流程对系统稳定性有着至关重要的作用。把流程规范的建立作为稳定性建设的开始是一个比较好的选择，不需要付出非常巨大的成本，但对稳定性的提升有着很大的帮助。好的流程规范应该覆盖项目整个生命周期（需求评审，项目管理，项目开发，code review，测试用例评审，上线流程，故障通报，故障复盘）尽可能的帮助开发避免风险点。</li>
<li>基础设施<br>基础设施建设是稳定性建设的核心方向。科技是第一生产力，工具可以带来能力和效率的大幅提升。只有具备完备而且强大的工具才有可能保障复杂系统的高可用，试想如果没有监控报警就连最基础的故障感知都无法做到，缺少运维工具的辅助想要做到故障的快速恢复更是天方夜谭。</li>
<li>稳定性意识<br>稳定性意识的提升是最基础也是最难的工作。很多人眼里只有业务功能，很少关心稳定性工作，需要在日常文化中强调稳定性的重要性，通过例会，巡检，定期演练的方式提升大家的稳定性意识。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/metrics.png" alt=""></p>
<h2 id="阶段">阶段</h2><ol>
<li>事前<br>事前重在风险的发现和预防，做好容量规划，服务治理，系统优化，慢查优化，提升系统鲁棒性。</li>
<li>事中<br>事中重在最快止损，最快定位。止损是第一优先级的事情，需要提前准备好故障预案。定位则依赖完备的工具和对系统业务的熟悉。</li>
<li>事后<br>事后重在修复故障影响，复盘和改进。一个故障的发生一定是要做到闭环的，必然存在可改进项，同时也要做到对事不对人。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/stage.png" alt=""></p>
<h2 id="架构">架构</h2><ol>
<li>网络层<br>网络层是系统架构中不确定性最高的部分。用户通过网络访问系统服务，网络的延迟和成功率直接影响着用户的体验，很可能由于运营商的设备升级和道路施工导致网络不可用，并且机房断电，火灾，地震..这些极端因素都会导致业务瘫痪，如果业务期望达到即使在此类灾难性故障的情况下，业务也不受影响，或者在几分钟内就能够很快恢复，那么就需要设计异地多活架构。根据地理位置上的距离来划分，异地多活架构可以分为同城异区、跨城异地、跨国异地。多活架构的最大难点就是地理位置导致的数据同步延迟和业务上强一致的矛盾。</li>
<li>应用层<br>应用层是系统架构中复杂度最高变化最频繁的部分。一个使用微服务架构的业务线涉及到几十个系统，几百个服务，几千个接口，系统间存在大量的交互，如何做好服务治理，保障应用层的稳定性是一个重大的挑战。</li>
<li>存储层<br>存储层是系统架构中最需要被保护的部分。存储层即强大又脆弱，缓存是系统高性能的核心，使系统能够承载高并发的流量带来的压力，同时缓存的穿透，雪崩也往往会导致大故障。mysql则是更加的脆弱，一个无索引的慢查，几个大事务都可能导致数据库的瘫痪。</li>
<li>中间件<br>中间件作为系统架构中的数据通道和流量通道，是稳定性发力的支点。可以通过在中间件中集成服务治理，限流，降级等策略使尽可能多的应用系统收益，中间件的一小步的优化往往会带来系统稳定性的一大步提升。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/layerx.png" alt=""></p>
<h2 id="架构原则">架构原则</h2><ol>
<li>冗余<br>冗余是高可用架构的核心原则。好的架构需要做到对流量冗余，资源冗余，硬件冗余，也是异地多活，集群部署，容量规划的核心思想。</li>
<li>隔离<br>隔离是高可用架构的另一个核心原则。除了冗余之外也需要做好故障隔离，资源隔离，前后台隔离，在线离线隔离，防止故障在线程，进程，应用，领域之间的传播，小的风险演变成大的事故。</li>
</ol>
<h2 id="全局工作概览">全局工作概览</h2><p>最后是一张全局工作概览图，有些已经做的比较成熟，有些还需要继续完善。</p>
<p><img src="https://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/availability.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前也写过一篇稳定性工作的总结-<a href="http://minotaursu.com/2018/03/12/%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%]]>
    </summary>
    
      <category term="工作" scheme="http://minotaursu.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="性能" scheme="http://minotaursu.com/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="稳定性" scheme="http://minotaursu.com/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
      <category term="高可用" scheme="http://minotaursu.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
      <category term="高并发" scheme="http://minotaursu.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈Lambda架构和Kappa架构]]></title>
    <link href="http://minotaursu.com/2019/05/31/%E6%B5%85%E8%B0%88Lambda%E6%9E%B6%E6%9E%84%E5%92%8CKappa%E6%9E%B6%E6%9E%84/"/>
    <id>http://minotaursu.com/2019/05/31/浅谈Lambda架构和Kappa架构/</id>
    <published>2019-05-31T13:17:38.000Z</published>
    <updated>2019-05-31T13:23:50.669Z</updated>
    <content type="html"><![CDATA[<h1 id="数据系统的本质">数据系统的本质</h1><p>query = function(all data)，对于数据系统的本质Marz提出了一个简单的公式。在大部分情况，在数据集上执行查询函数立即就能获得结果，但是当数据量到达一定量级时，function则需要变的更加复杂。针对OLTP场景的解决方案通常是shard（pre-sharding和auto-sharding ），针对OLAP场景的解决方案通常则是lambda架构和kappa架构。</p>
<h1 id="Lambda架构">Lambda架构</h1><p>Lambda架构是一个融合了批处理和近实时计算的大数据处理架构，由Storm的作者Nathan Marz提出，其设计目的在于提供一个能满足大数据系统关键特性的架构，包括高容错、低延迟、可扩展等。其整合离线计算与实时计算，融合不可变性、读写分离和复杂性隔离等原则，可集成Hadoop, Kafka, Spark，Storm等各类大数据组件。目前成为了业界大部分公司的数据处理架构的标配解决方案。<br>一个典型的lambda架构如下：<br><img src="http://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/lambda.png" alt=""><br>lambda架构分为三层: Batch, speed and serving。</p>
<h3 id="Batch_Layer">Batch Layer</h3><p>Batch Layer的功能是存储数据集，并且在数据集上运行数据处理函数，例如hadoop和MapReduce。</p>
<h3 id="Speed_Layer">Speed Layer</h3><p>Batch Layer可以很好的处理离线数据，但有很多场景数据不断实时生成，并且需要实时查询处理。Speed Layer的功能是处理批处理周期之间的增量实时数据。提供近实时的数据处理和业务快速响应。</p>
<h3 id="Serving_Layer">Serving Layer</h3><p>Serving Layer用于响应用户的查询请求，合并Batch View和Realtime View中的结果数据集到最终的数据集。</p>
<p>这种架构主要面向的场景是逻辑比较复杂同时又希望延迟比较低的异步处理程序，比如搜索引擎、推荐引擎等。<br>系统从一个流中读取被我们定义为不可变的数据，分别灌入实时系统如Storm和批处理系统如Hadoop，然后各自输出自己的结果，这些结果会在查询端进行合并。当然，这种系统也可有很多变种，比如上图中的Kafka也可替换成其他的分布式队列，Storm也可以替换成其他的流式计算引擎。</p>
<h3 id="Lambda架构的不足">Lambda架构的不足</h3><p>虽然Lambda架构具有诸多优点，以其成熟稳定的架构成为多数公司的大数据处理架构标配，但是也有一些不足：</p>
<ul>
<li>开发周期长：针对需求的变化既需要做批处理开发也需要做流式计算开发，重复的开发工作使开发周期更长。</li>
<li>结果不一致：由于批处理和实时计算走的是两个计算框架和计算程序，不同开发人员对业务的理解也可能会不一致，算出的结果往往不同。</li>
<li>存储成本大：由于批处理程序往往会产生很多中间表，造成数据膨胀，加大了存储成本。</li>
</ul>
<h1 id="kappa架构">kappa架构</h1><p>Kappa 架构是LinkedIn的Jay Kreps结合实际经验和个人体会，针对Lambda架构进行深度剖析，提出使用统一的流式计算架构来应对全量历史数据和增量实时数据。Kappa架构的核心思想，包括以下三点：</p>
<ul>
<li>用Kafka或者类似MQ队列系统收集各种各样的数据，你需要几天的数据量就保存几天。</li>
<li>当需要全量重新计算时，重新起一个流计算实例，从头开始读取数据进行处理，并输出到一个新的结果存储中。</li>
<li>当新的实例做完后，停止老的流计算实例，并把老的一些结果删除。<br>一个典型的kappa架构如下：<br><img src="http://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/kappa.png" alt=""></li>
</ul>
<h3 id="Kappa架构的不足">Kappa架构的不足</h3><p>Kappa架构的优点在于将实时和离线代码统一起来，方便维护而且统一了计算框架和数据口径。但是也有相应的不足：</p>
<ul>
<li>吞吐能力成为海量数据处理的瓶颈。面对海量的历史数据，流式计算的吞吐能力和并发能力往往力不从心，无法满足即时性要求。</li>
<li>更高的服务器成本。相比于批处理，流式计算有着更高的计算成本和存储成本。</li>
</ul>
<h1 id="如何选择">如何选择</h1><p>从长远看人力成本一定会远大于机器成本，系统的吞吐量可以随着硬件能力的提升和架构设计优化而改善。在大部分领域kappa架构可能是更适合的选择。</p>
<p>参考:<br><a href="http://www.databasetube.com/database/big-data-lambda-architecture/" target="_blank" rel="external">Big Data Lambda Architecture</a><br><a href="https://www.oreilly.com/ideas/questioning-the-lambda-architecture" target="_blank" rel="external">questioning the lambda architecture</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="数据系统的本质">数据系统的本质</h1><p>query = function(all data)，对于数据系统的本质Marz提出了一个简单的公式。在大部分情况，在数据集上执行查询函数立即就能获得结果，但是当数据量到达一定量级时，function则需要变的更加复]]>
    </summary>
    
      <category term="大数据" scheme="http://minotaursu.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="存储" scheme="http://minotaursu.com/tags/%E5%AD%98%E5%82%A8/"/>
    
      <category term="架构" scheme="http://minotaursu.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="系统设计" scheme="http://minotaursu.com/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我职业生涯的几个关键点]]></title>
    <link href="http://minotaursu.com/2019/05/12/%E6%88%91%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF%E7%9A%84%E5%87%A0%E4%B8%AA%E5%85%B3%E9%94%AE%E7%82%B9/"/>
    <id>http://minotaursu.com/2019/05/12/我职业生涯的几个关键点/</id>
    <published>2019-05-12T02:25:55.000Z</published>
    <updated>2019-06-12T04:13:27.059Z</updated>
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/chance.jpg" alt=""></p>
<h1 id="关于原则">关于原则</h1><h2 id="坚持原则">坚持原则</h2><p>在勇士与猛龙的总决赛G5中面对外界的压力和内部的期待杜兰特带伤付出，结果再次受伤赛季报销，对个人的职业生涯造成了严重的影响。在生活中充满了各种干扰因素，外界的压力很可能改变个人原本的行为，在催促和期待中妥协，放弃自己的原则。从结果来看，背离自己初衷的做法通常很难带来让自己满意的结果，例如在选择大学专业上人们会期望你选择一个热门但完全不是自己兴趣点的专业，这个时候能否遵从自己的内心，坚持原则就尤为重要。而人们之所以犹豫，妥协，不能坚持自己的原则很大一部分原因就是没有原则和不能权衡利弊。</p>
<h2 id="机会成本">机会成本</h2><p>做任何选择其实都包含了隐藏的机会成本，例如在08年之前买房，在15年之前买房，在15年之后买房完全是不同的价格，持币观望者的机会成本高到可怕。<br>背离自己的原则之所以往往有比较差的结果正是因为有着更高的机会成本。因此我们要在自我认知的基础上建立自己的原则并权衡利弊，才能降低机会成本。首先要问问自己的价值观是什么，在价值观的基础上设定目标，为目标找到一个可执行的路径和关键节点，在面对选择时评估选项是否能更接近目标或者关键节点，最后就是坚持原则。</p>
<h2 id="我的原则">我的原则</h2><p>谈谈我的职业目标原则-能够持续的具有选择的自由。持续是指时间维度上，不论是工作一年还是工作二十年，选择的自由则是有选择工作的能力，并且这份工作是体面的，收入合理的，强度适当的，当然也包括选择不工作的能力（这个就比较高级了）。中短期的发展方向是技术管理岗位，例如架构师，做事为主，管理为辅。</p>
<h1 id="关于机会">关于机会</h1><h2 id="多个短跑">多个短跑</h2><p>人生其实并不是一场马拉松，而是多个短跑冲刺和漫长的运营时间（相对垃圾）组成。面对机会成了就进入下一个平台，人生因此改变，没成就需要再等下一个机会（不知道哈时候），如果一直没能把握机会人生可能就那样了。其实应试教育最大的问题就是只培养解决问题的能力，忽略了自我认知，自我目标和洞察机会的能力。能否洞察机会，把握机会才是人生境遇不同的最大原因，80年代微软的操作系统，2000年的电子商务，2010年的苹果和移动互联网是把握了时代的大势，我的一些同学/同事在微信/蚂蚁/滴滴/老虎证券变成了千万富翁是把握了公司的高速发展机会。创造新价值的增量游戏要比零和博弈的存量游戏的发展前景大的多，可能性大的多，也好玩的多。</p>
<h2 id="价值">价值</h2><p>个人在市场的价值我认为有以下几种类型，唯一价值（垄断），比较价值（替代价值，同质化竞争），信息不对称价值（差异化竞争）。</p>
<ul>
<li>唯一价值：企业追求垄断的超额利润，个人也是如此，真正能实现价值最大化（利益最大化）的方式就是垄断，就是不可代替性，一般性的方式有三种，掌握资本（老板），掌握渠道（销售高收入的原因，也是金融行业遍布二代的原因），掌握核心技术专利（大学教授），程序员在这个价值领域机会并不多。</li>
<li>比较价值：比较价值就比较直白了，就是人员代替成本也就是性价比的问题，在相同能力下价格越低的人越有优势，这个就是白热化的竞争，除了努力提升自己和low的人拉开层次毫无办法。</li>
<li>信息不对称价值：<br>利用信息不对称可以赚取中间商的利润，虽然不如垄断价值但是也比白热化竞争的比较价值强的多，工作中最典型的玩法就是跨界，例如目前风生水起的知识付费，例如后端中最好的前端，前端中最好的产品，产品中最好的设计师，本质上都是提供神秘性，稀缺性，权威性（伪），垄断信息交换节点，拥有更大的话语权和议价权。当然个人的经历和思考也是一种信息不对称价值，差异化价值是个人价值中最重要的部分。</li>
</ul>
<h2 id="工作中的几个机会">工作中的几个机会</h2><p>回顾一下工作中的几个机会点，首先是毕业之后能在阿里工作并且获得最佳新人奖，这个主要是个人演讲能力比较好（差异化竞争），之后获得了一次半年4.0全年3.75的高绩效，原因是公司全栈化的浪潮中负责后端团队中的前端组（差异化竞争，刚毕业的时候前端还成，后续因为没有知识体系，知识更新速度太快和缺少练习已经忘光了），后续表现平平就比较一般，然后跳槽到了滴滴，前2年也比较一般，虽然做了几个大项目但肯定不是核心成员（只有比较价值），后续在稳定性（高可用，可扩展）工作中展示了专业性成为比较重要的团队成员（差异化价值，不只是能做业务）。<br>在过去的工作生涯中抓住了入职的机会和全栈化的机会，但是因为机会的局限性和自身能力的局限性，没能更进一步，发展出独立负责的业务领域。跳槽的第一年比较失败成了小透明，后续因为把握住了做稳定性负责人的机会个人发展还比较顺利。总体说来工作上想要有大的跨越还是要把握住天王山之战的机会，例如之前工作中的几个机会，部门全栈化没人会前端导致业务不能顺利进行。系统数据量和并发量提升，业务价值越来越大需要更高的系统稳定性。当然还需要这件事情本身具有比较好的前景，并在这个基础上持续创造价值和价值更大化。</p>
<h1 id="关于持续进步">关于持续进步</h1><h2 id="执行力与领导力">执行力与领导力</h2><p>上面讲了职业的发展主要靠关键机会，想要发现和抓住这些机会则依靠能力的提升，应该重点关注的能力有2个，一个是执行力，一个是领导力。</p>
<ul>
<li>执行力：好的执行包含计划，沟通，风险评估，实施，反馈，改进这几个流程，在计划阶段做好任务分解，优先级，关键成败点，在沟通阶段理解好别人的意图，在项目过程中做好风险评估，实施之后及时反馈关键节点，项目结束/阶段结束之后通过复盘等形式做出改进。</li>
<li>领导力：领导力的要点则是了解自己，了解他人，建立影响力，指明目标和方向，很多其实是个人气质和个人魅力决定的。</li>
</ul>
<h2 id="事与人">事与人</h2><p>在工作中其实包含了人和事2个需要关注的维度。做事方面主要是洞察问题，分析问题，解决问题。做人则是和上下级建立信任关系，和志同道合的同事保持友好关系（衡量标准是离职后有3到5个人能成为朋友），和合作方形成利益共同体。</p>
<h2 id="态度与方式">态度与方式</h2><p>想要取得持续的进步在态度和做事方式也有几个关键点。</p>
<ul>
<li>主动：在思想和行动上保持主动，站在不同人的角度（主要是上级和主要合作方）思考和解决问题，承担一些工作范围之外的职责。</li>
<li>职业：具有ownership，责任意识，持续的关注和改进目标，对公司负责，更对自己的职业生涯负责。</li>
<li>事情第一：在工作中也会存在一些场外因素的干扰，这个时候要秉持事情第一的原则，推单项目解决，具有吃掉大象的能力。例如在之前的工作中，同事自主研发了一个系统，相比开源方案而言并无任何优势，并且功能薄弱一些问题迟迟不能解决，在这个时候如果我在团队中采用开源方案也许是更好的选择，更能做好事情。</li>
<li>利用资源：寻求帮助并不是一件失败的事情，面子并没想的那么重要，能够借助/协同上下游把事情做好才是重要的。例如在这次跳槽中，虽然看好业务前景，但是对于工作地点并不满意，并没有很好的借助朋友，hr，猎头的信息，广泛的提供更多的可能性。</li>
</ul>
<h1 id="总结">总结</h1><p>最后根据我的工作经验做一下总结，首先要设定目标并坚持原则，洞察和把握机会（timing），为了更好的把握机会需要持续的进行能力提升（运营）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/chance.jpg" alt=""></p>
<h1 id="关于原则">关于原则</h1>]]>
    </summary>
    
      <category term="职业规划" scheme="http://minotaursu.com/tags/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
      <category term="软技能" scheme="http://minotaursu.com/tags/%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据存储系统的选择]]></title>
    <link href="http://minotaursu.com/2019/05/08/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    <id>http://minotaursu.com/2019/05/08/数据存储系统的选择/</id>
    <published>2019-05-08T01:39:02.000Z</published>
    <updated>2019-06-08T01:40:11.089Z</updated>
    <content type="html"><![CDATA[<p>数据库作为应用系统中最重要的基础设施，承载着通过数据访问接口<br>存储和查询用户信息的功能，当今的互联网业务场景越来越丰富和复杂，并且数据库作为有状态服务扩展成本高昂，选择适合业务场景的数据变的十分重要。本文分别对比一些常用的数据库（包括mysql，redis，mongodb，hbase，elasticsearch，influxdb，rocksdb），通过简要分析其中的原理确定每种数据库适合场景和优缺点。</p>
<h2 id="mysql">mysql</h2><p>mysql作为典型的关系型数据库在互联网和传统软件行业都有着广泛的应用。mysql的优点是有着最完备的单机功能（增删改查，事务，关联）和最丰富的社区生态。缺点则是在高并发场景下单机性能一般，不支持auto-sharding需要额外的proxy，schema模型不能便捷的增加字段。适合场景有复杂事务，低性能需求数据关联，一般性业务等</p>
<h2 id="redis">redis</h2><p>redis作为key-value存储有着良好的性能，并且redis相比memcache有着更丰富的数据结构，在非持久化场景中可以作为高性能缓存使用，在持久化场景中可以作为关系型数据库的补充。对于需要集群使用的场景codis是一个不错的选择。合适场景有高性能缓存，少量数据持久化存储。</p>
<h2 id="mongodb">mongodb</h2><p>mongodb是一个高性能的文档型数据库，以BSON的格式保存数据，优点是schema-free模式非常适合增加字段，并且自带auto-sharding的集群分片功能在数据扩容方面有着明显的优势，也有着geohash等丰富功能。缺点则是事务方面较弱，并且不支持关联查询。适合的场景有物联网，视频，地理位置，社交等。</p>
<h2 id="hbase">hbase</h2><p>hbase是基于LSM（Log-StructuredMergeTree）的思想，LSM树和B+树相比，LSM树牺牲了部分读性能，用来大幅提高写性能。hbase适合写多读少的场景，并且hbase没有二级索引，只支持单rowkey，rowkey的range，全表扫描3种方式。适合的场景有搜索引擎和推荐系统底层的数据存储，监控日志存储。</p>
<h2 id="elasticsearch">elasticsearch</h2><p>elasticsearch是基于Lucene构建的搜索引擎，除了作为全文搜索之外也可以作为nosql数据使用。适合的场景有搜索引擎，数据可视化，日志检索系统，后台客服系统。</p>
<h2 id="influxdb">influxdb</h2><p>influxDB是目前最流行的时序数据库，存储引擎称为TSM，基本架构类似于LSM。数据按照key组织，influxDB中key由维度集合加上某一个列值名构成，所有属于该维度集合加列值的时间序列数值组成的一个集合就挂在该key下。适合的场景有物联网，监控。</p>
<h2 id="rocksdb">rocksdb</h2><p>rocksdb并非一个完整的数据库系统，而是基于LevelDB开发的一种嵌入式Key-value存储系统，该数据库能够充分利用闪存的性能，大大提升应用服务器的速度。引入了 LSM 树，就是为了解决 B+ 树随机写性能低的问题，它把随机写以跳跃表的形式保留在内存中（memtable），积累到足够的大小就不再改写它了，并将其写入到磁盘（L0 SST file），这样就只有顺序写了。合适的场景是多种数据库的存储引擎。</p>
<h2 id="sharding策略">sharding策略</h2><p>分布式数据库一般有两种Sharding策略：Range Sharding和Hash Sharding。</p>
<h4 id="range">range</h4><p>range假设key有序，好处是临近的key经常在一起，比如共同前缀的key,可以很好的支持scan操作，hbase的region就是range策略。缺点是对压力较大的顺序写不太友好，比如日志类型的写入，一般日志的key都是和时间相关的，时间是单调递增的，因此写入的热点永远在最后一个region。</p>
<h4 id="round-hash">round-hash</h4><p>把数据mod后直接映射到真实节点上面，这造成节点个数和数据的紧密关联、后期缺乏灵活扩展。</p>
<h4 id="consistent-hash">consistent-hash</h4><p>多增加一层虚拟映射层，数据与虚拟节点映射、虚拟节点与真实节点再映射，减少扩容和宕机情况下数据迁移的影响。</p>
<h4 id="hash-slot">hash-slot</h4><p>采用固定节点数量，来避免取模的不灵活性。采用可配置映射节点，来避免一致性哈希的部分影响。</p>
<h2 id="数据同步">数据同步</h2><p>数据同步保证同一个数据分片的多个副本之间的数据一致性，一般的数据同步算法有异步，半同步（ISR的机制），全同步，paxos，raft，gossip。异步复制有最佳的性能，最可能的数据丢失/不一致问题，半同步复制提高了数据的安全性，同时它也造成了一定程度的延迟，这个延迟最少是一个TCP/IP往返的时间，全同步有着最好的数据一致性和最差的性能。paxos利用过半选举的机制，保证了集群数据副本的一致性，raft是paxos的简化版本，更易于理解的工程实现，ggossip利用去中心化的协议进行数据同步，好处是无任何单点故障，坏处是同步时间过长。</p>
<p>参考：<br><a href="https://segmentfault.com/a/1190000004474543" target="_blank" rel="external">2PC到3PC到Paxos到Raft到ISR</a><br><a href="https://segmentfault.com/a/1190000014503967" target="_blank" rel="external">分布式一致性机制整理</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>数据库作为应用系统中最重要的基础设施，承载着通过数据访问接口<br>存储和查询用户信息的功能，当今的互联网业务场景越来越丰富和复杂，并且数据库作为有状态服务扩展成本高昂，选择适合业务场景的数据变的十分重要。本文分别对比一些常用的数据库（包括mysql，redis，mongo]]>
    </summary>
    
      <category term="分布式" scheme="http://minotaursu.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="大数据" scheme="http://minotaursu.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="存储" scheme="http://minotaursu.com/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java保留小数点后2位格式化问题]]></title>
    <link href="http://minotaursu.com/2019/04/29/java%E4%BF%9D%E7%95%99%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E2%E4%BD%8D%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%97%AE%E9%A2%98/"/>
    <id>http://minotaursu.com/2019/04/29/java保留小数点后2位格式化问题/</id>
    <published>2019-04-29T06:07:43.000Z</published>
    <updated>2019-05-20T03:17:42.263Z</updated>
    <content type="html"><![CDATA[<p>最近在做应用的jdk7升级8和核心类库升级的工作。发现一个把Double格式化成String的函数并不是每次都按照4舍5入进行格式化，例如1.325的运行结果是1.32，而12.345的运行结果则是12.35。这个问题是因为在二进制中并没有一个值能准确的表示这个十进制的小数值，只是非常接近这个十进制数值。</p>
<p><img src="http://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/java-bug.png" alt=""></p>
<p>如果希望所见即所得的获取格式化结果，可以使用BigDecimal.toPlainString或者String.format代替DecimalFormat 进行浮点数格式化。<br>相同的情况也存在于new BigDecimal和BigDecimal.valueof中，使用new BigDecimal(double val)会得到更精准的值，但是BigDecimal.valueof才是所见即所得。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在做应用的jdk7升级8和核心类库升级的工作。发现一个把Double格式化成String的函数并不是每次都按照4舍5入进行格式化，例如1.325的运行结果是1.32，而12.345的运行结果则是12.35。这个问题是因为在二进制中并没有一个值能准确的表示这个十进制的小数]]>
    </summary>
    
      <category term="java" scheme="http://minotaursu.com/tags/java/"/>
    
      <category term="jdk8" scheme="http://minotaursu.com/tags/jdk8/"/>
    
      <category term="语言陷阱" scheme="http://minotaursu.com/tags/%E8%AF%AD%E8%A8%80%E9%99%B7%E9%98%B1/"/>
    
      <category term="软件开发" scheme="http://minotaursu.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的类库选择]]></title>
    <link href="http://minotaursu.com/2019/02/18/%E6%88%91%E7%9A%84%E7%B1%BB%E5%BA%93%E9%80%89%E6%8B%A9/"/>
    <id>http://minotaursu.com/2019/02/18/我的类库选择/</id>
    <published>2019-02-18T08:14:43.000Z</published>
    <updated>2019-05-20T03:20:16.457Z</updated>
    <content type="html"><![CDATA[<p>好的类库可以提升简化代码，提高开发效率，这里列出一些我常用的类库。</p>
<ol>
<li>json相关<br>fastjson，jackson。fastjson偏重的是简单和快速，内部实现有很多的hack。而jackson偏重的是标准和强大。国内项目使用fastjson会多一些。</li>
<li>date相关<br>joda-time。</li>
<li>io相关<br>guava。</li>
<li>集合相关<br>guava。</li>
<li>数学计算<br>guava。</li>
<li>内存缓存。<br>guava。</li>
<li>xml相关<br>xstream。</li>
<li>html相关<br>jsoup。</li>
<li>bean mapper<br>dozer，cglib。dozer最灵活，性能比较差，cglib的beancopier基于ASM字节码实现，性能接近getter/setter方法，少量对象mapper建议使用dozer。</li>
<li>字节码<br>Javassist，asm。Javassist的使用更加方便。</li>
<li>模版引擎<br>freemaker，velocity。freemaker功能更强大，velocity 简单，性能好，内部模版渲染建议使用freemaker，大量页面生成使用velocity。</li>
<li>http相关<br>okhttp</li>
<li>日志相关<br>slf4j</li>
<li>网络相关<br>netty</li>
<li>测试相关<br>junit，mockito。写单元测试的开发才是负责的RD</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>好的类库可以提升简化代码，提高开发效率，这里列出一些我常用的类库。</p>
<ol>
<li>json相关<br>fastjson，jackson。fastjson偏重的是简单和快速，内部实现有很多的hack。而jackson偏重的是标准和强大。国内项目使用fastjson]]>
    </summary>
    
      <category term="java" scheme="http://minotaursu.com/tags/java/"/>
    
      <category term="工作" scheme="http://minotaursu.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="软件开发" scheme="http://minotaursu.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何保障高并发系统的稳定性与高可用]]></title>
    <link href="http://minotaursu.com/2018/03/12/%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7%E4%B8%8E%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <id>http://minotaursu.com/2018/03/12/如何保障高并发系统的稳定性与高可用/</id>
    <published>2018-03-12T10:49:33.000Z</published>
    <updated>2019-05-20T03:24:45.927Z</updated>
    <content type="html"><![CDATA[<p>要论如何搞垮一家互联网公司，速度最快的不是产品经理的胡乱决策，运营的无休止的烧钱，客服人员对客户的冷漠，一定是系统核心功能持续的不可用，一次大规模的故障可能造成几千万的损失，市值大量蒸发，PR风险，甚至工信部的约谈。<br><img src="http://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/kdn.png" alt=""></p>
<p>一般的系统对全年可用性要求是99%或者99.9%，而影响着千万人日常生活的系统一般都要求全年系统可用性在4个9以上，这可不是一个容易达到的目标，那么如何避免故障，保障系统的稳定性与高可用，根据总结别人的方法和自身的经验，想要做好稳定性与高可用有16字心决</p>
<blockquote>
<p>完善基础，做好自身，容错下游，防备上游</p>
</blockquote>
<p>说起来影响稳定性的因素无非内部变化与外部变化，应对的心决也只有短短的16个字，然而魔鬼就在细节中，稳定性与高可用的建设中需要完善的基础设施支持，高效的制度规范，无数程序员的付出，上千万真金白银的投入。</p>
<h1 id="完善基础">完善基础</h1><p>所谓工欲善其事，必先利其器。完善的基础设施建设是一切的开始，对于稳定性建设不可或缺的三个基础设施就是监控，压测，降级。</p>
<h3 id="监控系统">监控系统</h3><p>监控能够量化系统的运行情况，是问题发现和系统优化的基础，没有监控就不能知道系统发生了什么问题，不能知道系统运行指标也就是无法做出针对性的优化。完善的监控需要将系统，应用，数据库，缓存，核心组件，第三方依赖纳入进来，做到面面俱到，并且能够第一时间就看到系统的核心指标，还需要对重要的应用指标，业务指标，投诉指标都设置好报警规则。分布式追踪系统也是发现问题的重要手段，需要核心功能链路上的服务都进行接入。</p>
<h3 id="压测">压测</h3><p>如果说监控系统是系统的体检报告，那么压测就是体能测试。监控系统可以看到过去和当前的指标，压测则是对未来的预测。一般来说压测分为单机压测和系统的压测，单机压测比较合适压测某个特定的场景和项目，好处是压测实施简单，可以压测出一个系统极限值，缺点是和系统的真实运行情况有一定差距。系统间压测的最好形式就是全链路压测，全链路压测更接近系统的真实运行情况，可以找出应用，存储，缓存，依赖服务，网络情况的瓶颈。</p>
<h3 id="降级">降级</h3><p>优雅降级是应对突发情况的重要手段，当系统发生故障时如何快速止损就是第一优先级的事情，如果没有相应的措施只能眼睁睁看着系统的故障发展，甚至造成多米诺骨牌效应。主要的降级方式有限流和熔断，可降级点有核心功能的非核心依赖，非核心服务，高并发接口，高资源消耗服务，对于高并发应用日志级别的动调调整也是重要的一个功能点。关于降级最重要的事情就是要日常演练一定要测试正确性，一定要测试正确性，一定要测试正确性，没有被验证正确的降级反而可能引起更严重的事故。</p>
<h1 id="做好自身">做好自身</h1><h3 id="控制资源合理使用">控制资源合理使用</h3><p>做系统设计，代码实现时一定要意识到所有的资源都是有限的，cpu，内存，磁盘，网络，线程，一旦某个资源超过负载，很容易出现线上问题。</p>
<h4 id="cpu">cpu</h4><p>良好的系统CPU的高峰期空闲率应该在40%以上，线程，锁，gc，代码循环这些因素都会影响CPU的负载，一般来说要重点预防的是死锁的情况（例如多线程情况下hashmap死锁），一旦死锁会出现CUP使用率骤增导致系统故障。</p>
<h4 id="内存">内存</h4><p>内存的使用最重要的是避免OOM和内存泄露，一旦发生很可能就是线上事故。其次的重点是大数据量下不要使用内存缓存(guava，ehcache)，频繁的GC会造成系统的可用性大幅降低，堆外内存的使用也需要重点关注，合适的数据压缩算法可以提供内存的利用率。</p>
<h4 id="磁盘">磁盘</h4><p>日志打印要精简，需要定期对日志进行归档清理，并且要对磁盘的使用量设置监控，建议接入动态调整日志级别功能在发生问题时可以进行日志降级，对于高并发的系统建议异步输出日志。</p>
<h4 id="线程池">线程池</h4><p>根据多年的经验线程池是最容易出问题的点之一，使用线程池一定要设置队列大小并且对于要求快速响应的系统来说队列长度设置过大也没有意义。线程池的core size和max size一定要合理设置，至少需要冗余高峰期3倍以上的流量，如果下游系统响应变慢/超时导致线程池打满，而线程池服务于核心功能的代码时非常容易出现故障。能否合理的设置线程池是判定程序员是否有资源有限，容错设计意识的重要标准。</p>
<h3 id="mysql">mysql</h3><p>和其他无状态的业务服务不同，数据库作为有状态服务很难通过加机器解决容量问题，考虑到业务的发展，流量爆发的突然性，业界有着系统架构支持10倍增长，系统设计支持5倍增长，系统实现支持2倍增长的说法，最好在设计时就做好垂直拆分，水平拆分的工作，单个数据库的IO，网络，磁盘，CPU都有限制。另外一件重要的事情就是一定要建立合适的索引，避免慢查询，而过多的索引也会影响写性能。</p>
<h3 id="避免单点">避免单点</h3><p>一定不要把鸡蛋都放在一个篮子里，不要求大的架构层面的异地多活，单元化，最基本要部署多个节点，通过负载均衡访问。</p>
<h1 id="容错下游">容错下游</h1><p>被下游服务拖垮是1024种线上事故中非常经典的一种，显然我们不希望因为下游服务挂了自己的业务也跟着挂掉。为了保护自己的业务需要做以下几件事情。</p>
<h3 id="有兜底，有熔断">有兜底，有熔断</h3><p>对于外部依赖，一定要做到兜底和熔断，通过检测超时情况或者异常情况，当依赖服务不可用时可以使用本地的兜底策略，向上提供有损服务，保证业务柔性可用。</p>
<h3 id="一定要设置超时时间">一定要设置超时时间</h3><p>假设某服务的响应时间是50ms，线程池是200，假设系统没有超时时间设置，响应时间从50ms突变到5000ms，瞬间就能打满线程池导致服务不可用。为了保证系统不被下游的变慢拖垮一定要设置超时时间，建议内部接口都设置在200ms以下，依赖第三方公网服务的接口设置在1500ms以下。</p>
<h3 id="谨慎设置重试次数">谨慎设置重试次数</h3><p>合理的设置重试次数即是保护下游也是保护自己，假设重试次数过多会导致服务响应时间的变慢（超时时间*重试次数），并且很容易引起下游的雪崩，导致下游长时间不可用。建议重要的接口设置2次重试，不必要的接口都不要设置重试次数。</p>
<h1 id="防备上游">防备上游</h1><p>被上游陡增的流量打垮是1024种线上事故中非常经典的另一种，这里区分2种情况来讨论，一种是活动流量，需要预测活动预期的流量峰值，对高资源消耗的非核心功能提前降级，做好压测和降级预案，并设置一定的用户流控。另一种是内部的猪队友作案，可能顺手写个循环就带来10倍的流量增长，这种情况也要设置好系统的流量阀值，并且需要做到流量的按需分配，能够弄清楚流量的来源。<br>最后自己画了一张图，对可能的情况和故障做一个总结。</p>
<p><img src="http://raw.githubusercontent.com/minotaursu/minotaursu.github.io/source/images/robust.png" alt=""></p>
<p>通过上文可以发现监控(量化过去和现在)，压测（预测未来），降级（预防故障，快速止损）对系统的重要性。其中容错下游（熔断）和防备上游（限流）同样需要依靠降级服务实现，提到降级服务我们会想到Hystrix，除此之外滴滴出行有经验的老司机都会选择SDS（service downgrade system），SDS是一个由多位资深工程师开发的纯java语言降级系统，支持访问量，并发量，异常量，超时时间等多个监控指标的降级点，支持滑动窗口，令牌桶等多种算法，在数据可视化方面支持多种数据源（mysql，mongo，elasticsearch，influxdb）的存储和展示，可以选择喜欢的数据源进行降级可视化配置。相信在不久的未来就会开源和大家见面。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>要论如何搞垮一家互联网公司，速度最快的不是产品经理的胡乱决策，运营的无休止的烧钱，客服人员对客户的冷漠，一定是系统核心功能持续的不可用，一次大规模的故障可能造成几千万的损失，市值大量蒸发，PR风险，甚至工信部的约谈。<br><img src="http://raw.gith]]>
    </summary>
    
      <category term="工作" scheme="http://minotaursu.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="性能" scheme="http://minotaursu.com/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="稳定性" scheme="http://minotaursu.com/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
      <category term="高可用" scheme="http://minotaursu.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
      <category term="高并发" scheme="http://minotaursu.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
</feed>
