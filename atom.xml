<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Minotaur story]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://minotaursu.com/"/>
  <updated>2018-03-05T03:41:53.605Z</updated>
  <id>http://minotaursu.com/</id>
  
  <author>
    <name><![CDATA[minotaur]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[所有需要知道的GC知识]]></title>
    <link href="http://minotaursu.com/2018/03/03/%E6%89%80%E6%9C%89%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84GC%E7%9F%A5%E8%AF%86/"/>
    <id>http://minotaursu.com/2018/03/03/所有需要知道的GC知识/</id>
    <published>2018-03-02T16:24:51.000Z</published>
    <updated>2018-03-05T03:41:53.605Z</updated>
    <content type="html"><![CDATA[<p><img src="http://hexo-tuchuan.qiniudn.com/jvmspeed.png" alt=""><br>作为一个java语言开发的应用，为了每一个0.1%的性能提升，折腾过了网络，IO，数据库之后难免要折腾一下GC。写下这篇日志的目的是希望看完这篇日志后，关于GC的问题能从google+stackoverflow寻找答案的过程中解脱出来，99%的GC问题都能独立解决，也方便自己温故知新。</p>
<h1 id="JVM内存结构">JVM内存结构</h1><p>目前主流的JVM都将内存分成不同的区域，JVM内存结构主要由堆，方法区和栈组成，堆作为最大一块的内存又由Eden空间、From Survivor空间、To Survivor空间，Old空间组成。<br><img src="http://hexo-tuchuan.qiniudn.com/jvm.png" alt=""><br>新生代（Young Generation）：大多数对象在新生代中被创建(某些大对象可能直接创建在老年代)，其中很多对象的生命周期很短。<br>一般而言新生代内又分三个区：一个Eden区，两个Survivor区，当Eden区满时，还存活的对象将被复制到其中一个Survivor区。当这个Survivor区满时，此区的存活且不满足“晋升”条件的对象将被复制到另外一个Survivor区。对象每经历一次Minor GC，年龄加1，达到“晋升年龄阈值”后，被放到老年代，这个过程也称为“晋升”。在Serial和ParNew GC两种回收器中，“晋升年龄阈值”通过参数MaxTenuringThreshold设定，默认值为15。<br>老年代（Old Generation）：在新生代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代，该区域中对象存活率高。老年代的垃圾回收（又称Major GC）通常使用“标记-清理”或“标记-整理”算法。整堆包括新生代和老年代的垃圾回收称为Full GC。</p>
<h1 id="垃圾回收器">垃圾回收器</h1><p>串行（Serial）回收器是单线程的一个回收器，简单、易实现、效率高。<br>并行（ParNew）回收器是Serial的多线程版，可以充分的利用CPU资源，减少回收的时间。<br>吞吐量优先（Parallel Scavenge）回收器，侧重于吞吐量的控制。<br>并发标记清除（CMS，Concurrent Mark Sweep）回收器是一种以获取最短回收停顿时间为目标的回收器，该回收器是基于“标记-清除”算法实现的。</p>
<h1 id="一些参数">一些参数</h1><p>-Xms 设置堆的最小空间大小。<br>-Xmx 设置堆的最大空间大小。<br>-Xmn 设置新生代最小空间大小（推荐使用）。<br>-XX:NewSize 设置新生代最小空间大小。<br>-XX:MaxNewSize 设置新生代最大空间大小。<br>-XX:SurvivorRatio 设置Eden:Survivor中的一个比例,默认是8:1:1<br>-XX:PermSize 设置永久代最小空间大小。<br>-XX:MaxPermSize 设置永久代最大空间大小。<br>-Xss 设置每个线程的堆栈大小<br>老年代空间大小=堆空间大小-年轻代大空间大小<br>-XX:+DisableExplicitGC 显示禁止System.gc()，System.gc()变成一行无效的代码，如果系统有使用堆外内存不建议配置这个jvm参数<br>-XX:+UseConcMarkSweepGC 设置老年代为并发收集<br>-XX:+CMSParallelRemarkEnabled 降低标记停顿<br>-XX:+UseCMSCompactAtFullCollection 打开对年老代的压缩。可能会影响性能，但是可以消除碎片<br>-XX:LargePageSizeInBytes 设置内存页的大小<br>-XX+UseCMSInitiatingOccupancyOnly 标志来命令JVM不基于运行时收集的数据来启动CMS垃圾收集周期，始终使用CMSInitiatingPermOccupancyFraction的值（不推荐使用）<br>-XX:CMSInitiatingOccupancyFraction，默认为68，即当年老代的空间使用率达到68%时，会执行一次CMS回收。如果应用程序的内存使用率增长很快，在CMS的执行过程中，已经出现了内存不足，此时，CMS回收就会失败，虚拟机将启动SerialOld串行收集器进行垃圾回收。如果这样，应用程序将完全中断，直到垃圾回收完成，这时，应用程序的停顿时间可能会较长<br>-XX:+CMSScavengeBeforeRemark 强制重新标记前进行一次MinorGC，如果Eden区有大量活跃对象推荐使用。<br>-XX:+PrintGCDetails 输出GC的详细日志<br>-XX:+PrintGCTimeStamps 输出GC的时间戳<br>-XX:+PrintHeapAtGC 在进行GC的前后打印出堆的信息<br>-XX:+PrintTenuringDistribution 指定JVM在每次新生代GC时，输出幸存区中对象的年龄分布</p>
<h1 id="看懂GC日志">看懂GC日志</h1><h2 id="一次典型的minorGC日志示例:">一次典型的minorGC日志示例:</h2><p><img src="http://hexo-tuchuan.qiniudn.com/gcprocess.png" alt=""></p>
<h2 id="一次典型的CMS_GC日志示例:">一次典型的CMS GC日志示例:</h2><p>39.910: [GC 39.910: [ParNew: 261760K-&gt;0K(261952K), 0.2314667 secs] 262017K-&gt;26386K(1048384K), 0.2318679 secs]<br>新生代使用 (ParNew 并行)回收器。新生代容量为261952K，GC回收后占用从261760K降到0,耗时0.2314667秒。(译注：262017K-&gt;26386K(1048384K), 0.2318679 secs 表示整个堆占用从262017K 降至26386K,费时0.2318679)</p>
<p>40.146: [GC [1 CMS-initial-mark: 26386K(786432K)] 26404K(1048384K), 0.0074495 secs]<br>开始使用CMS回收器进行老年代回收。初始标记(CMS-initial-mark)阶段,这个阶段标记由根可以直接到达的对象，标记期间整个应用线程会暂停。<br>老年代容量为786432K,CMS 回收器在空间占用达到 26386K 时被触发</p>
<p>40.154: [CMS-concurrent-mark-start]<br>开始并发标记(concurrent-mark-start) 阶段，在第一个阶段被暂停的线程重新开始运行，由前阶段标记过的对象出发，所有可到达的对象都在本阶段中标记。</p>
<p>40.683: [CMS-concurrent-mark: 0.521/0.529 secs]<br>并发标记阶段结束，占用 0.521秒CPU时间, 0.529秒墙钟时间(也包含线程让出CPU给其他线程执行的时间)</p>
<p>40.683: [CMS-concurrent-preclean-start]<br>开始预清理阶段<br>预清理也是一个并发执行的阶段。在本阶段，会查找前一阶段执行过程中,从新生代晋升或新分配或被更新的对象。通过并发地重新扫描这些对象，预清理阶段可以减少下一个stop-the-world 重新标记阶段的工作量。</p>
<p>40.701: [CMS-concurrent-preclean: 0.017/0.018 secs]<br>预清理阶段费时 0.017秒CPU时间，0.018秒墙钟时间。</p>
<p>40.704: [GC40.704: [Rescan (parallel) , 0.1790103 secs]40.883: [weak refs processing, 0.0100966 secs] [1 CMS-remark: 26386K(786432K)] 52644K(1048384K), 0.1897792 secs]<br>Stop-the-world 阶段,从根及被其引用对象开始，重新扫描 CMS 堆中残留的更新过的对象。这里重新扫描费时0.1790103秒，处理弱引用对象费时0.0100966秒，本阶段费时0.1897792 秒。</p>
<p>40.894: [CMS-concurrent-sweep-start]<br>开始并发清理阶段，在清理阶段，应用线程还在运行。</p>
<p>41.020: [CMS-concurrent-sweep: 0.126/0.126 secs]<br>并发清理阶段费时0.126秒</p>
<p>41.020: [CMS-concurrent-reset-start]<br>开始并发重置</p>
<p>41.147: [CMS-concurrent-reset: 0.127/0.127 secs]<br>在本阶段，重新初始化CMS内部数据结构，以备下一轮 GC 使用。本阶段费时0.127秒</p>
<h1 id="一些case">一些case</h1><h2 id="频繁MinorGC和MajorGC">频繁MinorGC和MajorGC</h2><p>某应用配置xms=6g xmx=6g xmn=4g，高峰期应用每10s发生一次Minor GC，每次GC时间在10-20ms，每40min发生一次Major GC，每次GC时间在100ms-200ms。配置成xms=10g xmx=10g xmn=7g后，高峰期应用每30s发生一次Minor GC，每次GC时间在20-30ms，每天发生一次Major GC，每次GC时间在100ms-200ms。 通常情况下，由于新生代空间较小，Eden区很快被填满，就会导致频繁Minor GC，因此可以通过增大新生代空间来降低Minor GC的频率,单次Minor GC时间由以下两部分组成：T1（扫描新生代）和 T2（复制存活对象到Survivor区),扩容后，Minor GC时增加了T1（扫描时间），但省去T2（复制对象）的时间，更重要的是对于虚拟机来说，复制对象的成本要远高于扫描成本，所以，单次Minor GC时间更多取决于GC后存活对象的数量，而非Eden区的大小。因此如果堆中短期对象很多，那么扩容新生代，单次Minor GC时间不会显著增加。</p>
<h2 id="偶发长时间FULLGC">偶发长时间FULLGC</h2><p>某应用正常FULLGC时间是100-200ms，会偶发耗时大于1000ms的FULLGC，分析GC日志发现耗时突增主要发生在remark阶段， Remark耗时&gt;1000ms时，新生代使用率都在75%以上。新生代中对象的特点是“朝生夕灭”，这样如果Remark前执行一次Minor GC，大部分对象就会被回收。对于这种情况，CMS提供CMSScavengeBeforeRemark参数，用来保证Remark前强制进行一次Minor GC。使用这个配置之后FULLGC的时间再也没有超过1000ms。</p>
<h2 id="必现长时间FULLGC">必现长时间FULLGC</h2><p>某应用每周发生一次FULLGC，正常时间都在500ms以下，突然在某个时间点之后发生的FULLGC耗时都超过了5000ms，耗时增加了一个数量级。分析发现GC真实的耗时是远大于用户耗时和系统耗时的，例如:[Times: user=2.56 sys=0.07, real=9.82 secs]。有些时候系统活动诸如内存换入换出（vmstat）、网络活动（netstat）、I/O （iostat）在 GC 过程中发生会使 GC 时间变长。特别是有 SWAP 区域（用 top、 vmstat 等命令可以看出）用于内存的换入换出，那么操作系统可能会将 JVM 中不活跃的内存页换到 SWAP 区域用以释放内存给线程使用（这也透露出内存开始不够用了）。内存换入换出是一个开销巨大的磁盘操作，比内存访问慢好几个数量级。在减小JVM大小，禁用swap后应用恢复正常。</p>
<h2 id="大量使用枚举导致频繁GC">大量使用枚举导致频繁GC</h2><p>某任务类应用配置xms=6g xmx=6g xmn=4g，解析文件生成对象进行处理，大量发生MinorGC和FULLGC，调整jvm参数后改善有限，执行jmap -histo:live [pid] 后发现大量枚举对象，应用中大量使用枚举以及valueOf方法生成枚举。使用静态map替换枚举的valueof方法后FULLGC的频率降低到原来的1/10。</p>
<h1 id="建议配置">建议配置</h1><p>首先确定一下我们的目标，降低GC对性能的影响，最小化STW的时间，每次STW的时间都小于服务最大响应时间的要求。更具体的目标就是最小化fullGC的频率及持续时间，最小化minorGC频率及持续时间。为了实现这个目标有以下几点限制：</p>
<ol>
<li>堆大小在合理的范围</li>
<li>老年代大小在合理的范围</li>
<li>幸存区大小在合理的范围</li>
</ol>
<p>堆大小直接影响到GC的频率和时间，业务场景，应用和硬件都会对堆大小的设置产生影响，要想获得一个合适的大小，只能通过不断的测试调优。个人经验是响应时间优先的应用为操作系统和日志采集预留出足够的内存并且不大于16G的范围内堆设置的越大越好(如果业务量比较小可能造成浪费)。<br>老年代的大小直接影响FULLGC的频率和时间，个人经验是设置成高峰期老年代活跃数据的大小的3倍。<br>幸存区大小会影响晋升到老年代对象的数量，minorGC的持续时间。个人经验是幸存区的大小需要能够容纳存活的对象到达配置的MaxTenuringThreshold年龄，避免promotion failed。</p>
<p>参考:<br><a href="https://tech.meituan.com/jvm_optimize.html" target="_blank" rel="external">从实际案例聊聊Java应用的GC优化</a><br><a href="http://www.importnew.com/22886.html" target="_blank" rel="external">JVM 调优 —— GC 长时间停顿问题及解决方法</a><br><a href="https://www.jianshu.com/p/051d566e110d" target="_blank" rel="external">海量连接服务端jvm参数调优杂记</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://hexo-tuchuan.qiniudn.com/jvmspeed.png" alt=""><br>作为一个java语言开发的应用，为了每一个0.1%的性能提升，折腾过了网络，IO，数据库之后难免要折腾一下GC。写下这篇日志的目的是希望看完]]>
    </summary>
    
      <category term="gc" scheme="http://minotaursu.com/tags/gc/"/>
    
      <category term="java" scheme="http://minotaursu.com/tags/java/"/>
    
      <category term="性能" scheme="http://minotaursu.com/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2017年终总结]]></title>
    <link href="http://minotaursu.com/2018/02/22/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://minotaursu.com/2018/02/22/2017年终总结/</id>
    <published>2018-02-22T06:17:55.000Z</published>
    <updated>2018-02-22T08:42:18.665Z</updated>
    <content type="html"><![CDATA[<p>作为工作第N年的第M份总结还是要感叹一下时间的飞快, 首先总结一下认为比较重要的几件事情。</p>
<ol>
<li>去日本关西玩了一趟，也算是第一次去发达国家了，住的民宿，性价比特别高，日本的交通不是一般的贵。作为消费者喜欢日本的精致服务，但并不想在日本生活。。</li>
<li>去了南京看中山陵，沧桑国府，金陵一梦。</li>
<li>老婆去了阿里，工资涨了不少，工作也忙了很多，如果自己还在阿里不离职不晋升可能还没老婆工资高。。</li>
<li>在滴滴经历了一次晋升，全票通过，精神上得到了认同。</li>
<li>买了车，还清了除房贷车贷之外的一切贷款，财富从消费阶段转向积累阶段。</li>
<li>工作上做了很多业务开发之外的工作，学到了不少东西。</li>
<li>王者农药单排段位达到王者，坚持你所坚持，很多事情比想象的简单。</li>
<li>星际二战役全通。</li>
<li>2017年的wishlist完成了60%,希望2018年的wishlist能完成80%以上。</li>
</ol>
<p>2017年是工作和生活平衡的一年，前半年更加生活，和老婆一起吃了很多晚饭，周边游国外游都有，也和小伙伴们一起5排过。下半年系统的压力很大，项目也多，工作上尝试了很多方法，做了不少事情，加了不少班，也得到了认可。整体而言工作中生活中都在忙，缺少了悟，2018年还是希望多读一些书(30本以上)，多一些感悟和参悟，对未来有一定的预见。</p>
<p>2018·wishlist</p>
<ol>
<li>云南/亚洲某国行一次，目的地视财力而定</li>
<li>为知名开源项目贡献一次代码，例如elasticsearch，netty等</li>
<li>完成 <a href="http://book.douban.com/people/49806902/wish" target="_blank" rel="external">豆瓣阅读列表</a></li>
<li>做事更有条理，寻找更多的可能性</li>
<li>学会吉他</li>
<li>2018年总结时，列出一件自己觉得NB的事情</li>
</ol>
<p><img src="http://hexo-tuchuan.qiniudn.com/hzdream.png" alt="人的梦想，是不会终结的"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>作为工作第N年的第M份总结还是要感叹一下时间的飞快, 首先总结一下认为比较重要的几件事情。</p>
<ol>
<li>去日本关西玩了一趟，也算是第一次去发达国家了，住的民宿，性价比特别高，日本的交通不是一般的贵。作为消费者喜欢日本的精致服务，但并不想在日本生活。。</li>]]>
    </summary>
    
      <category term="工作" scheme="http://minotaursu.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="总结" scheme="http://minotaursu.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="滴滴" scheme="http://minotaursu.com/tags/%E6%BB%B4%E6%BB%B4/"/>
    
      <category term="阿里" scheme="http://minotaursu.com/tags/%E9%98%BF%E9%87%8C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一次GC耗时超长的问题排查]]></title>
    <link href="http://minotaursu.com/2018/02/22/%E4%B8%80%E6%AC%A1GC%E8%80%97%E6%97%B6%E8%B6%85%E9%95%BF%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>http://minotaursu.com/2018/02/22/一次GC耗时超长的问题排查/</id>
    <published>2018-02-22T03:57:06.000Z</published>
    <updated>2018-02-22T07:15:54.555Z</updated>
    <content type="html"><![CDATA[<p><img src="http://hexo-tuchuan.qiniudn.com/gc.png" alt=""></p>
<p>2017年10月某日突然收到FullGC耗时超长的报警，排查发现应用存在周期性FULLGC耗时超长的的情况，每次FULLGC时间长达5s以上，甚至出现过10s以上的FULLGC，导致FULLGC时应用的响应全部超时。最初是怀疑系统有大量的对象没有释放导致FULLGC时间过长，第一时间dump了应用的内存，并没有发现内存泄露的情况。后面查看GC日志发现Rescan阶段weak refs processing的超时都超长，GC日志里大量可见[weak refs processing, 9.7398650 secs]，排查的方向就逐渐转向了weak refs processing 为什么会花费如此长的时间，大家在一起针对代码分析了很久，从jackson的使用，到本地缓存的使用，到NIO的影响，每个人都提出了自己的见解，但是又没有强有力的证据验证自己的结果，按照这个思路排查了一晚上也没有结果。<br>后面分析发现耗时超长的FULLGC只出现在特定的某一台服务器上，该应用的FULLGC耗时在其他服务器上都表现正常，排查发现出现GC耗时过长的服务器还部署着大数据的某个高IO类型的应用，排查的思路又转向了服务器的IO和cpu，但是并没有发现io和cpu的异常情况，排查似乎陷入了困境。<br><img src="http://hexo-tuchuan.qiniudn.com/easygc.png" alt=""><br>过了几天之后找到了一个可视化的GC分析工具<a href="http://gceasy.io/" target="_blank" rel="external">gceasy.io</a> ，分析后发现一个之前一直忽略的现象，GC真实的耗时是远大于用户耗时和系统耗时的，[Times: user=2.56 sys=0.07, real=9.82 secs]。我们知道JVM本身作为一个进程也是由linux系统进行内存分配，而linux的内存空间由两部分构成，物理内存和swap空间，假如GC时有一部分内容被交换到swap，遍历到这部分的时候就需要将其交换回内存，极端情况下甚至会把整个堆分区轮流往SWAP写一遍，而磁盘交换的速度是远慢于物理内存的，如果GC和swap同时发生会导致超长时间的卡顿，通过sar -W -f 命令分析发现swap时间完全吻合发生耗时超长的GC时间，基本可以断定是系统的物理内存不够用导致系统发生swap，最终导致耗时超长的GC发生，关闭linux的swap后引用的GC时间恢复到500ms以下。<br>虽然gc耗时超长的问题得到了解决，但是仔细思考一下就会发现问题的解决完全依赖程序员的推理过程和知识储备，那么是不是可以有更简单更快速的问题排查定位手段，我认为答案是可以的，那就是更加智能化的监控，将业务指标，应用指标，系统指标打通关联，在FULLGC超时报警的时候通知告知业务开发系统发生了swap，并且能展示对订单量和GMV等指标的影响。好的基础设施就像强大的武器，虽然依赖好的枪法用手枪也能杀死敌人，但是手里有把AKM或M16还是更容易吃鸡。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://hexo-tuchuan.qiniudn.com/gc.png" alt=""></p>
<p>2017年10月某日突然收到FullGC耗时超长的报警，排查发现应用存在周期性FULLGC耗时超长的的情况，每次FULLGC时间长达5s以上，甚]]>
    </summary>
    
      <category term="gc" scheme="http://minotaursu.com/tags/gc/"/>
    
      <category term="java" scheme="http://minotaursu.com/tags/java/"/>
    
      <category term="性能" scheme="http://minotaursu.com/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jackson使用setDateFormat后反序列化错误]]></title>
    <link href="http://minotaursu.com/2017/12/22/jackson%E4%BD%BF%E7%94%A8setDateFormat%E5%90%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%94%99%E8%AF%AF/"/>
    <id>http://minotaursu.com/2017/12/22/jackson使用setDateFormat后反序列化错误/</id>
    <published>2017-12-22T04:08:57.000Z</published>
    <updated>2017-12-22T04:11:15.181Z</updated>
    <content type="html"><![CDATA[<p><img src="http://hexo-tuchuan.qiniudn.com/jackson.png" alt=""></p>
<p>最近marketing-activity系统在接入降级服务，出现启动时可以正确获取到降级配置，系统运行一段时间后修改降级策略不生效的问题，之前订单系统，用户系统和其他系统的接入都没问题出现这个问题，肯定是触发了某种特定的case。营销的同学联系我进行排查，排查日志发现是降级服务反序列化Date类型异常，接收到的数据格式是yyyy-MM-dd HH:mm:ss，并不在jackson支持的反序列化格式之内。降级服务的sdk也是使用的jackson进行序列化的，为什么会出现jackson序列化后的数据却不能使用jackson反序列化。<br>接着查看marketing-activity系统的降级服务sdk日志发现一个很诡异的现象，最初发送的序列化后的请求还是时间戳格式的，运行一段时间后就变成了yyyy-MM-dd HH:mm:ss格式，也就是说系统的行为在运行时被改变了。<br><img src="http://hexo-tuchuan.qiniudn.com/sds-log.png" alt=""></p>
<p>那么到底是什么可以改变系统运行时的序列化逻辑呢？可能出现的主要原因有2种。一种是字节码技术，也就是btrace，greys这些。另一种就是调用jackson本身的api改变了一些属性。显然第二种的可能性更大一些，果然在jsonUitl里发现了蛛丝马迹，toObject允许设置特定的时间格式进行反序列化，调用setDateFormat会导致后续全部的Date类型的序列化都会是yyyy-MM-dd HH:mm:ss格式，自然不能默认设置的jackson反序列化。<br><img src="http://hexo-tuchuan.qiniudn.com/jsonutil.png" alt=""></p>
<p>至此降级服务改变策略后不生效的根本原因就得到了解答，那么如果某个对象就是要使用yyyy-MM-dd HH:mm:ss 进行序列化和反序列化怎么办，建议使用@JsonFormat 单独对属性进行注释。<br>最后谈谈fastjson和jackson，貌似jackson的各种坑遇到过很多，而fastjson的坑很少，那么为什么jackson还是要比fastjson更流行，真的只是国外的月亮更圆，空气更甜？这个主要是json框架的设计理念偏重点不同，fastjson偏重的是简单和快速，内部实现有很多的hack和magic code。而jackson偏重的是标准和强大，格式支持json，xml，有很多的属性可以设置非常的灵活，也有很多的接口可以自定义进行扩展，导致学习成本比较高，需要详细看过jackson文档才能上手。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://hexo-tuchuan.qiniudn.com/jackson.png" alt=""></p>
<p>最近marketing-activity系统在接入降级服务，出现启动时可以正确获取到降级配置，系统运行一段时间后修改降级策略不生效的问]]>
    </summary>
    
      <category term="jackson" scheme="http://minotaursu.com/tags/jackson/"/>
    
      <category term="java" scheme="http://minotaursu.com/tags/java/"/>
    
      <category term="json" scheme="http://minotaursu.com/tags/json/"/>
    
      <category term="工作" scheme="http://minotaursu.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[更换一门工作语言的成本]]></title>
    <link href="http://minotaursu.com/2017/12/18/%E6%9B%B4%E6%8D%A2%E4%B8%80%E9%97%A8%E5%B7%A5%E4%BD%9C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%88%90%E6%9C%AC/"/>
    <id>http://minotaursu.com/2017/12/18/更换一门工作语言的成本/</id>
    <published>2017-12-18T08:21:21.000Z</published>
    <updated>2017-12-22T08:27:42.020Z</updated>
    <content type="html"><![CDATA[<p><img src="http://hexo-tuchuan.qiniudn.com/lang.jpeg" alt=""></p>
<p>程序员这个职业经常需要学习新的技术，假如某一天工作上主要使用的语言没落了，或者新的项目需要使用另一门不熟悉的语言开发，那么成本到底有多少，那些是需要重新学习的，又有那些是可以被保留或者继承的。</p>
<h3 id="需要重新学习的">需要重新学习的</h3><ol>
<li>语法&amp;语法糖。这应该是最简单的部分，是用大括号分组还是使用缩进分组，条件语句是否需要括号，函数是否可以赋值给变量，是否支持lambda。</li>
<li>语言中的对象&amp;集合。可以看做是更高一级的语法，用来处理数据结构。</li>
<li>怎么处理io&amp;网络&amp;数据库连接。 上点规模的项目必然用到。</li>
<li>经典的第三方库。需要一段时间。</li>
<li>经典的应用框架。使用可能比较快，解决疑难bug和二次开发需要对源码有一定了解。</li>
<li>线程协程。想要写出高效的代码必须精通。</li>
<li>语言相关的中间件。这可能是成本最高，最痛苦的部分。</li>
</ol>
<h3 id="不需要重新学习的">不需要重新学习的</h3><ol>
<li>如何学习一门语言。不开玩笑，这才是最重要的技能，熟悉一门语言后学习新的语言会快很多。</li>
<li>数据结构和算法的知识。</li>
<li>操作系统。</li>
<li>io&amp;网络&amp;数据库方面的知识。</li>
<li>数据库调优。</li>
<li>业务系统设计。</li>
<li>架构思想。MVC分层，微服务。</li>
<li>中间件的原理。</li>
<li>业务知识。</li>
<li>思维逻辑。</li>
</ol>
<p>需要重新学习的主要集中在工具层面，保留的主要是思想和原理。看起来重新学习一门语言就像一个内力深厚的高手不再用剑改学刀法，问题不会很大，但也不是毫无风险，初学期遇到一个难缠的对手也容易乱拳打死老师傅。可能需要一个月到半年的熟悉期。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://hexo-tuchuan.qiniudn.com/lang.jpeg" alt=""></p>
<p>程序员这个职业经常需要学习新的技术，假如某一天工作上主要使用的语言没落了，或者新的项目需要使用另一门不熟悉的语言开发，那么成本到底有多少，]]>
    </summary>
    
      <category term="go" scheme="http://minotaursu.com/tags/go/"/>
    
      <category term="java" scheme="http://minotaursu.com/tags/java/"/>
    
      <category term="python" scheme="http://minotaursu.com/tags/python/"/>
    
      <category term="语言" scheme="http://minotaursu.com/tags/%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[archsummit2017见闻和思考]]></title>
    <link href="http://minotaursu.com/2017/12/13/archsummit2017%E8%A7%81%E9%97%BB%E5%92%8C%E6%80%9D%E8%80%83/"/>
    <id>http://minotaursu.com/2017/12/13/archsummit2017见闻和思考/</id>
    <published>2017-12-13T10:31:39.000Z</published>
    <updated>2017-12-13T12:45:53.469Z</updated>
    <content type="html"><![CDATA[<p><img src="http://hexo-tuchuan.qiniudn.com/archsummit.jpeg" alt=""></p>
<p>前几天参加了archsummit的北京站。2天的日程安排的十分紧凑，大多数时间同时有多场专题分享，选择想要听的专题就成了首要的事情，按照感兴趣的，可能用到的，启发思考的原则选择了几场适合自己的专题，这里记录一下大会的见闻和思考。</p>
<h2 id="创新是人类的自信">创新是人类的自信</h2><p><strong>推荐指数：4星</strong><br>王坚博士的演讲作为archsummit的开场show拉开了archsummit的帷幕，开场就提出了一个很大的愿景:开一个会能够让50年以后的人开很多会来讨论，每天在世界上开的各种会议数以千万计，能够到达这种目标的会议真是十年难遇，显然要到达这个目标需要巨大的创新，可能是基础理论层面的创新或是定义了某些原理和标准。接下的分享主题都围绕着年轻，创新，自信，三者是相辅相成的，只有挑战离年轻人更近，未来才会离我们更近。虽然分享的时间很短，可以感受到王坚博士是一个有智慧有趣的人，以及非常的有工程师精神。</p>
<h2 id="算法无处不在：Hulu当今和未来的技术架构">算法无处不在：Hulu当今和未来的技术架构</h2><p><strong>推荐指数：3星</strong><br>hulu讲了算法在视频广告业务的应用，算法如何带来更好的用户体验和更高的收入，接下来讲的人工智能平台是很好的工程实践，如何让算法的实现优化验证更容易，如何让更多的人员参与到这个过程，基础设施的建设能够提高工程生产力，服务于更多的场景，产生更多的价值。</p>
<h2 id="阿里巴巴云化架构创新之路">阿里巴巴云化架构创新之路</h2><p><strong>推荐指数：4星</strong><br>目前系统架构实践层面最流行的就是微服务，而容器技术作为微服务最适合的载体，必然是构建技术大厦最基础的一环，而容器的调度和编排就是皇冠上最闪耀的明珠。从google的borg开始到k8s在开源界的一统天下，通过合理的部署调用节约资源的利用率一直就是重点的研究方向，而阿里的分享也几乎都和混合云相关，资源利用率的提示对拥有海量服务和数据的巨头意义重大，每一点带来的都是真金白银。对于缺少devOps知识的业务开发人员来说，是一个很好的科普专题。</p>
<h2 id="高可用低延时的PayPal风控数据平台">高可用低延时的PayPal风控数据平台</h2><p><strong>推荐指数：3星</strong><br>由于下午没有抢到原本想听的专题的位置，去听了金融应用专题，个人理解金融的最重要的核心之一就是风控，虽然分享的标题中带有风控，但是这个分享和风控的关系真心不大，更多的专注于如果做好一个抽象的数据访问层，以及数据访问层相关的性能优化，分享特别提实施一个完整的性能测试是非常花时间的工作，就个人的工作经历来看也是如此，实际的代码编写在工作中所占的时间并不高，反而需求，设计，各种方面的测试，线上问题排查才是真正占用大部分时间的，如何让不懂技术的人了解，接受，支持这些非编码工作和非业务功能工作所占用的大量时间的确是一个问题。</p>
<h2 id="陆金所金融平台的架构大升级">陆金所金融平台的架构大升级</h2><p><strong>推荐指数：2星</strong><br>分享的主题核心也和金融的关系不大，架构演进遇到的问题也是和非金融系统大部分相近，更像是一个做的业务是金融相关的系统的架构演进过程。如果能在更高的维度进行抽象，提炼出分布式系统的关键技术点可能效果会更好。</p>
<h2 id="腾讯海外计费系统架构演进">腾讯海外计费系统架构演进</h2><p><strong>推荐指数：5星</strong><br>腾讯的国际化架构分享干货满满，很多在同一个IDC内的解决方案在，多中心的情况下都没办法采用。针对网络，部署，支付，风控等很多领域的遇到的问题和解决方案多有涉及，可以看到是一个global team在做的事情和相应的技术实力。</p>
<h2 id="京东国际独立站系统演进">京东国际独立站系统演进</h2><p><strong>推荐指数：2星</strong><br>如果说陆金所金融平台的架构大升级是披着金融的外衣讲架构演进，那么京东国际独立站系统演进就是披着国际化的外衣讲架构演进，分享的内容更多是所做的业务是什么样的，并没有提及国际化的技术痛点，最后的性能支撑靠堆机器也是更像玩笑，在一个努力提高服务器资源利用率的时代，真的要这么诚实吗。。</p>
<h2 id="知乎_feed_流架构演进">知乎 feed 流架构演进</h2><p><strong>推荐指数：4星</strong><br>重点在于redis module功能带来的更多可能性，IO和网络操作都变成全内存操作的确大大提高了系统的响应速度。这种底层架构选择的变革带来的收益在适合的场景下具有超高的性价比。</p>
<h2 id="不改一行代码提升系统的性能和稳定性并支持秒杀：看分布式服务化架构关键技术">不改一行代码提升系统的性能和稳定性并支持秒杀：看分布式服务化架构关键技术</h2><p><strong>推荐指数：5星</strong><br>左耳朵耗子的分享真是人气爆棚，刚刚吃完午饭回去就已经座无虚席了，高度的抽象了系统架构领域遇到的问题，核心技术点，信息量很大，这场分享让我觉得很值得archsummit的票价。最后的不改一行代码支持秒杀也很有些诡计和魔术的意味。另外左耳朵耗子对PHP是最好的语言持有不同的看法，日常中个人也觉得java用来做需要持续迭代的业务，python用来做造测试数据和数据分析，shell用来查询线上问题是个很方便的组合。</p>
<h2 id="Service_Mesh在华为云的实践">Service Mesh在华为云的实践</h2><p><strong>推荐指数：3星</strong><br>Service Mesh作为下一代微服务的概念被Linkerd提出，在更底层的软件架构中解决微服务的痛点，分享对比了传统的(当前的)微服务框架和service mesh的优缺点，不难想到这种底层的通用框架面临的比较大的问题就是性能和扩展性，在service mesh的发展中如何解决这2点，发挥底层框架应用透明的优势，做到多数场景的可用就是关键。service mesh不一定是下一代微服务解决方案的结果，但service mesh的思想肯定会在下一代的微服务中传承，Keep it Simple and Stupid。</p>
<h2 id="Apollo自动驾驶及跟车方案的设计思路">Apollo自动驾驶及跟车方案的设计思路</h2><p><strong>推荐指数：4星</strong><br>对我来说有又一场科普向的分享，虽说对工作的帮助不大，但是自己还是很喜欢去听一听的，毕竟人生的一大乐趣就是做无意义的事情。<br>分享人孔旗在百度做主要做预测/决策/控制部分，分享的重点也是这些，很多自动驾驶的问题解决都是抽象出一个可解的数学问题，再对这个问题做简化和降维，得出一个局部最优解。整体听下来，自动驾驶是未来的一个必然，而真正达到L4级别的可用性并不是最近2年就可以搞定的但也不会等的特别久。而自动驾驶绝对是一个大生意，诞生出google，apple这个级别的公司也不奇怪。</p>
<h2 id="说些什么">说些什么</h2><p>互联网的发展史， 从最初的单项传播信息的门户模式 到搜索引擎，微博这种线上双向信息互动的模式，到现在如火如荼的各类各种移动互联网，到高速发展的人工智能和云计算。整体的业务，架构越来越复杂，越来越向着技术密集，资本密集方向发展<br>。对于创业者来说，一方面要面对可能的来自BAT的业务同质化竞争威胁，一方面拥有着BAT深耕出的互联网环境带来的便利，如何找到合适的切入方向就是首要解决的问题。对于互联网研发人员说来，业务复杂度，规模与高可用带来的挑战越来越高，同时开源社区的蓬勃发展也带来了越来越多的可能性，怎样利用好开源资源解决自身的业务问题也变得更加重要。如何在一个知识大爆炸的时代保持独立思考，选择适合自己的方向终将成为重要的技能之一，乔教主的那句 Stay Hungry,Stay Foolish 也许就是最好的解答。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://hexo-tuchuan.qiniudn.com/archsummit.jpeg" alt=""></p>
<p>前几天参加了archsummit的北京站。2天的日程安排的十分紧凑，大多数时间同时有多场专题分享，选择想要听的专题就成了首要的]]>
    </summary>
    
      <category term="Cloud native" scheme="http://minotaursu.com/tags/Cloud-native/"/>
    
      <category term="archsummit" scheme="http://minotaursu.com/tags/archsummit/"/>
    
      <category term="系统设计" scheme="http://minotaursu.com/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[微信红包的设计实现]]></title>
    <link href="http://minotaursu.com/2017/04/27/%E8%B0%88%E8%B0%88%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0/"/>
    <id>http://minotaursu.com/2017/04/27/谈谈微信红包的设计实现/</id>
    <published>2017-04-27T07:19:48.000Z</published>
    <updated>2017-04-28T05:15:30.000Z</updated>
    <content type="html"><![CDATA[<p>红包功能的设计实现是一个很有趣的话题，主要的功能是P个人抢总金额M的N个红包，满足先抢的N个人能抢到红包。如果这是一个leetcode的算法题目难度应该是easy，只要保证Ni抢到的金额区间在[0.01,2倍剩余金额平均值）就能ac。<br>将算法带入到真实的工程实现，问题就要复杂得多，如果达到微信的量级，明显要考虑的有以下几点。</p>
<ol>
<li>拆红包</li>
<li>高并发读</li>
<li>并发写</li>
<li>网络流量峰值</li>
<li>对账</li>
<li>降级</li>
<li>故障恢复</li>
</ol>
<h1 id="拆红包">拆红包</h1><p>拆红包有预拆包和实时拆包2种策略</p>
<h2 id="预拆包策略">预拆包策略</h2><p>预拆包的策略在发红包时将金额M的红包拆分成N份，将分配好的结果放入内存队列或者cache，通过incr操作在用户抢红包时分配预算好的红包slot，预算的策略可以避免对共享资源的操作，减少了锁竞争，服务本身是无状态的，设计和实现相对简单，伸缩性较好。劣势是需要额外的存储空间，如果存在大量活跃红包或者红包份数很多时会增加成本。</p>
<h2 id="实时拆包">实时拆包</h2><p>实时拆包的策略在用户抢红包时实时拆包计算金额，这样只需要保存剩余红包数量和金额，不需要额外保存每个预拆包的红包金额。使用预拆包的策略会面临并发写的问题，如果多个拆红包的请求同时执行会导致数据不一致引起超发的问题，可以使用CAS操作实现乐观锁保证并发拆包不会出现问题。</p>
<h1 id="高并发读">高并发读</h1><p>应对高并发读的通常思路是业务层拦截过滤无效请求，使用有效的缓存。可以使用Cache层decr功能记录请求红包的用户数，当decr到0后就拦截后面的请求直接返回，对DAO层也要增加相应的缓存减少数据库的压力。</p>
<h1 id="并发写">并发写</h1><p>应对并发写的通常思路是串行化和乐观锁。在用户抢红包时实时拆包计算金额，每抢到一个红包，就cas更新剩余金额和红包个数，同时在DB中记录凭证，考虑到DB的写入压力，需要做分库分表，冷热分离。</p>
<h1 id="网络流量峰值">网络流量峰值</h1><p>大量用户同时抢红包是否会造成网络拥塞，发红包和抢红包最好在同一个IDC。</p>
<h1 id="对账">对账</h1><p>考虑到拆红包凭证和入账是异步的2套系统，以及出现故障的可能，需要定时对账保证数据的一致性。</p>
<h1 id="降级">降级</h1><p>在cache故障时有限流的使用DB进行服务，在资源紧张的时候关闭掉非核心流程，在实时入账请求量过大时，延迟批量入账。</p>
<p><img src="http://hexo-tuchuan.qiniudn.com/wechat-small.jpg" alt=""><br>Reference:<br><a href="https://www.zybuluo.com/yulin718/note/93148" target="_blank" rel="external">https://www.zybuluo.com/yulin718/note/93148</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>红包功能的设计实现是一个很有趣的话题，主要的功能是P个人抢总金额M的N个红包，满足先抢的N个人能抢到红包。如果这是一个leetcode的算法题目难度应该是easy，只要保证Ni抢到的金额区间在[0.01,2倍剩余金额平均值）就能ac。<br>将算法带入到真实的工程实现，问题]]>
    </summary>
    
      <category term="工作" scheme="http://minotaursu.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="开发" scheme="http://minotaursu.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="系统设计" scheme="http://minotaursu.com/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用AOP记录应用调用链开销]]></title>
    <link href="http://minotaursu.com/2017/04/12/%E4%BD%BF%E7%94%A8AOP%E8%AE%B0%E5%BD%95%E5%BA%94%E7%94%A8%E8%B0%83%E7%94%A8%E9%93%BE%E5%BC%80%E9%94%80/"/>
    <id>http://minotaursu.com/2017/04/12/使用AOP记录应用调用链开销/</id>
    <published>2017-04-12T04:47:04.000Z</published>
    <updated>2017-04-12T05:14:39.000Z</updated>
    <content type="html"><![CDATA[<p>最近系统出现了一次线上的性能问题，本来以为目前的QPS应该是不会出现任何问题的，结果微服务还是比较容易因为某个点的问题导致雪崩的。。。出了性能问题就要做分析，正统的思路是要不断进行压测用JProfiler进行分析。后来自己简单搞了一下使用AOP抓取调用树和开销，看起来效果还不错，加上动态开关可以偶尔在线上用一下。代码提交到了<a href="https://github.com/minotaursu/profilerAop" target="_blank" rel="external">github</a>。本身的实现类似树的深度优先遍历，一个节点有多个子节点，在进入方法之前enter，在退出方法后release，都被release了就可以打印调用树日志了。而webx的profiler本身就提供了这种实现，大大的减少了开发时间。虽然之前在使用webx的时候总是觉得不爽，没有springmvc来的简洁，layout,action,screen也不适合移动时代的开发，现在都是rest服务或者使用api gateway配置api了，但不得不说webx的很多思想还是值得深入学习的，很多工具也很适合开源使用。一个框架能够稳定运行在各种业务场景，大范围推广使用本身就是了件不起的事情，这里给webx点个赞。<br>最后来看一下profiler的demo效果。<br><img src="http://hexo-tuchuan.qiniudn.com/profiler.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近系统出现了一次线上的性能问题，本来以为目前的QPS应该是不会出现任何问题的，结果微服务还是比较容易因为某个点的问题导致雪崩的。。。出了性能问题就要做分析，正统的思路是要不断进行压测用JProfiler进行分析。后来自己简单搞了一下使用AOP抓取调用树和开销，看起来效果还]]>
    </summary>
    
      <category term="AOP" scheme="http://minotaursu.com/tags/AOP/"/>
    
      <category term="java" scheme="http://minotaursu.com/tags/java/"/>
    
      <category term="spring" scheme="http://minotaursu.com/tags/spring/"/>
    
      <category term="性能" scheme="http://minotaursu.com/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016年终总结]]></title>
    <link href="http://minotaursu.com/2017/04/06/2016%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://minotaursu.com/2017/04/06/2016年终总结/</id>
    <published>2017-04-06T11:38:08.000Z</published>
    <updated>2018-02-22T08:30:37.344Z</updated>
    <content type="html"><![CDATA[<p>在2017年过去小半年之后，还是决定回顾一下过去的2016，写了这个年终总结。2016年初拿到了驾照，装修好了房子，看着勇士在总决赛被逆转痛失冠军，在G20期间出去玩了一趟，算是2016年比较重要的几件事情。 工作上运维了一整年的elasticsearch，支持了后台和BI的部分业务，贡献了大量的代码，也重构了很多的代码。在工作2年之后对系统大部分功能都比较熟悉，心理感觉有些疲倦，代驾也是一个拼内功，拼服务的行业，少会有爆发式的增长，市场的空间清晰可见。年后去前东家的云计算部门面试了一趟，希望能争取一个满意的offer，前东家给了一个base提升了一些，但算上滴滴的未固化的期权是降薪的offer。对于这种变化不大的offer最是难以选择，考虑了很久纠结了很久，最后还咨询了很多前同事的意见，大部分人是不建议我去。 工作上，行业，部门，老板，薪水都满意的情况实在难以出现。总体来说，2016年是变好的一年，并没有多少糟心的事情，日子很平静。2017年对自己的期待就是空杯心态，精益求精吧。</p>
<p>2017·wishlist</p>
<ol>
<li>日本/九寨沟行一次，目的地视财力而定</li>
<li>为知名开源项目贡献一次代码，例如elasticsearch，netty等</li>
<li>完成 <a href="http://book.douban.com/people/49806902/wish" target="_blank" rel="external">豆瓣阅读列表</a></li>
<li>blog的最高uv到达100</li>
<li>改进计费系统的持续集成方案</li>
<li>2017年总结时，列出一件自己觉得NB的事情</li>
</ol>
<p><img src="http://hexo-tuchuan.qiniudn.com/cup.jpeg" alt="空杯心态,精益求精"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在2017年过去小半年之后，还是决定回顾一下过去的2016，写了这个年终总结。2016年初拿到了驾照，装修好了房子，看着勇士在总决赛被逆转痛失冠军，在G20期间出去玩了一趟，算是2016年比较重要的几件事情。 工作上运维了一整年的elasticsearch，支持了后台和BI]]>
    </summary>
    
      <category term="工作" scheme="http://minotaursu.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="总结" scheme="http://minotaursu.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="滴滴" scheme="http://minotaursu.com/tags/%E6%BB%B4%E6%BB%B4/"/>
    
      <category term="阿里" scheme="http://minotaursu.com/tags/%E9%98%BF%E9%87%8C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[消息队列之简要设计]]></title>
    <link href="http://minotaursu.com/2016/11/06/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B9%8B%E7%AE%80%E8%A6%81%E8%AE%BE%E8%AE%A1/"/>
    <id>http://minotaursu.com/2016/11/06/消息队列之简要设计/</id>
    <published>2016-11-06T02:03:36.000Z</published>
    <updated>2017-03-07T05:39:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="消息队列的基本功能">消息队列的基本功能</h2><p>消息队列作为系统解耦，流量控制的利器，成为分布式系统核心组件之一。在日常的开发我们享受了使用消息队列带来的便利，那么如果要自己实现一个消息队列应该入手。本文不深入讨论具体，成熟的消息队列如kafka，rocketmq等，主要介绍一下基本功能，思想和设计。<br>首先转换一下角色，作为产品经理给自己提出一个实现消息队列的需求，那么首先列一下消息队列必备的功能有哪些。</p>
<ul>
<li>消息堆积</li>
<li>消息持久化</li>
<li>消息顺序</li>
<li>消息最少投递一次</li>
<li>支持多topic</li>
<li>相同topic支持多consumer</li>
<li>消息回溯</li>
<li>集群功能</li>
<li>负载均衡</li>
</ul>
<p>一个简单的消息队列基本功能如上，在某些特殊的场景还需要支持事务，消息重试等功能。此外除了功能部分，还需要尽可能优化性能，提供监控功能帮助报警和排查问题。</p>
<h2 id="消息队列的设计实现">消息队列的设计实现</h2><p>明确了功能需求，接下来就要考虑如何实现一个消息列队。<br>消息队列主要涉及到三个部分，通信协议+存储+消费关系维护。</p>
<h4 id="通信协议">通信协议</h4><p>极简版的消息队列甚至只需要一个redis就可以，按照topic将序列化的数据存储到redis，消费端使用redis的incr功能获取锁，获取到锁的consumer不断的轮询获取消息。当然这种极简版的消息队列是不能通过复杂的生产环境检验的，系统的可靠性也不能保证。这里将极简版的消息队列升级一下，使用成熟的RPC框架实现通信协议，将一次同步RPC调用变成2次PRC+存储，PRC框架帮我们解决了负载均衡，服务发现，通信协议，序列化/反序列化等问题。同时RPC框架也保证了通信层面的高可用。</p>
<h4 id="存储选择">存储选择</h4><p>对于分布式系统，存储的选择有以下几种</p>
<ul>
<li>内存</li>
<li>本地文件系统</li>
<li>分布式文件系统</li>
<li>nosql</li>
<li>rdbms<br>从速度上内存显然是最快的，对于允许消息丢失，消息堆积能力要求不高的场景(例如日志)，内存会是比较好的选择。rdbms则是最简单的实现可靠存储的方案，很适合用在可靠性要求很高，最终一致性的场景(例如交易消息)，对于不需要100%保证数据完整性的场景，要求性能和消息堆积的场景，hbase也是一个很好的选择。</li>
</ul>
<h4 id="消费关系">消费关系</h4><p>在消息存储在broker上后，需要的就是将消息正确的投递到消费者，消息的投递分为广播和单播, 最常见的使用场景是组内单播，组间广播，同一个集群使用相同的group注册订阅，通常消息队列本身不维护消费订阅关系，使用例如zookeeper等成熟的系统维护消费关系，在消费关系发生变化时下发通知。</p>
<h2 id="队列特性">队列特性</h2><p>确定了消息队列的模块功能需求后，还需要考虑队列的特性需求，这里重点考虑消息丢失，消息确认，消息重复，消息顺序性，投递方式</p>
<h4 id="消息丢失">消息丢失</h4><p>消息丢失可能发生在3种情况</p>
<ul>
<li>生产者-&gt; 队列</li>
<li>队列-&gt; 消费者</li>
<li>队列持久化本身<br>在生产者产生消息到队列的过程可能由于网络问题，宕机等原因没有达到消息队列，或者到达队列后并没有返回消息，这时可以通过重试等方式解决。队列到消费者时也会存在同样的问题，可以通过增加一个标识，投递消息前先标记成待完成状态，在收到消费者确认成功的回复后标记成完成。可以看到消息丢失和消息重复是一个硬币的2面, 保证消息不丢失也会带来消息重复的问题。</li>
</ul>
<h4 id="消息确认">消息确认</h4><p>消息确认就是将2次RPC变成3次RPC。在某些场景默认auto ack是可以的，但也需要支持消息者主动ack，在之后的某个时间重新投递</p>
<h4 id="消息重复">消息重复</h4><p>上面提到，在需要保证消息不丢失的场景，因为对投递失败的情况不可确定是失败，还是超时，需要进行重发，一定会带来消息的重复，这里要考虑的是如何减少重复，可以根据一定的规则(业务id+业务名)，数据库唯一主键，分布式主键等产生messageId（为了方便排查问题，一定要有messageId）, 对比清除周期内记录的messageId，如果messageId相同就认为是重复的消息。</p>
<h4 id="消息顺序性">消息顺序性</h4><p>比较简单有效的实现消息顺序性的方式就是单线程生产者+单线程消费者+每个消费线程对应一个单独队列, 排除消息丢失的情况，可以做到严格有序。</p>
<h4 id="投递方式">投递方式</h4><p>消息队列的投递方式可以分为push和pull2种，一种模型的某些场景下的优点，在另一些场景就可能是缺点。无论是push还是pull，都存在各种的利弊。<br>push的优点就是及时性，缺点就是受限于消费者的消费能力，可能造成消息的堆积，broker会不断给消费者发送不能处理的消息。<br>pull的优点的就是主动权掌握在消费方，可以根据自己的消息速度进行消息拉取，缺点就是消费方不知道什么时候可以获取的最新的消息，会有消息延迟和忙等。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="消息队列的基本功能">消息队列的基本功能</h2><p>消息队列作为系统解耦，流量控制的利器，成为分布式系统核心组件之一。在日常的开发我们享受了使用消息队列带来的便利，那么如果要自己实现一个消息队列应该入手。本文不深入讨论具体，成熟的消息队列如kafka，rock]]>
    </summary>
    
      <category term="分布式" scheme="http://minotaursu.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="消息队列" scheme="http://minotaursu.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="软件开发" scheme="http://minotaursu.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
